head	1.2;
access;
symbols;
locks
	robert:1.2; strict;
comment	@ * @;


1.2
date	2010.09.21.22.27.14;	author ranji;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.19.01.34.59;	author ranji;	state Exp;
branches;
next	;


desc
@@


1.2
log
@1. Removed eTimerState, using eProcessState instead.
2. Added eTimeScale to TimerStart().
3. Moved the 'timeout' argument from constructor to TimerStart().
4. Renamed TimerStart() to TimerStartAndBlockProcess(), makes it more obvious.
5. Renamed eTimeUnit to eTimeScale.
6. Replaced Execute(ok, intf) with ProcessExecute(ExecuteReason).
@
text
@// $RCSfile: Timer.h,v $
// $Revision: 1.1 $

#ifndef TimerClass
#define TimerClass

#include "Process.h"
#include "Simulator.h"

class Interface;
class Module;

class Timer : public Process
{
  friend class Scheduler;

public:
  Timer(const char* name, Module* module);
  ~Timer();

  bool TimerStart(unsigned timeout, eTimeScale tm_scale);
  bool TimerStartAndBlockProcess(unsigned timeout, eTimeScale tm_scale, Process* proc);
  bool TimerStop();
  bool TimerRestart();
//bool TimerStart(Clock clk, unsigned num_cycles);

  SimulationTime TimeoutValue()  const { return mTimeout;     }
  SimulationTime TimeStopped()   const { return mTimeStopped; }
  SimulationTime TimeElapsed()   const;

  virtual eProcessType ProcessType() const;

protected:
  virtual void ProcessExecute(ProcessExecuteReason& exec_reason);

private:
  SimulationTime   mTimeout;
  eTimeScale       mTimeScale;
  SimulationTime   mTimeStarted;
  SimulationTime   mTimeStopped;
  bool             mTimerScheduled;
  Process*         mpBlockedProcess;

};

#endif

// End
@


1.1
log
@Initial revision
@
text
@a12 8
enum eTimerState {
  eTimerState_NotYetStarted,
  eTimerState_Started,
  eTimerState_Completed,
  eTimerState_Stopped,
  eTimerState_Invalid
};

a14 1
public:
d17 2
a18 1
  Timer(const char* name, unsigned timeout, eTimeUnit tm_unit, Module* module);
d21 5
a25 3
  bool        TimerStart(Process* process=0); // optionally block 'process'
  bool        TimerStop();
  bool        TimerRestart();
a26 1
  eTimerState    TimerStateGet() const { return mTimerState;  }
d34 1
a34 1
  virtual void Execute(bool& all_ok, Interface* intf=0);
d38 1
a38 1
  eTimeUnit        mTimeUnit;
a40 1
  eTimerState      mTimerState;
@
