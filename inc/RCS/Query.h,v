head	1.9;
access
	Roberto;
symbols
	C1_80:1.4
	C1_70:1.3
	C1_00:1.1;
locks; strict;
comment	@ * @;


1.9
date	2011.12.03.18.04.15;	author robert;	state Exp;
branches;
next	1.8;

1.8
date	2011.09.19.16.26.20;	author robert;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.07.04.33.26;	author robert;	state Exp;
branches;
next	1.6;

1.6
date	2010.09.21.23.57.01;	author ranji;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.19.15.59.11;	author ranji;	state Exp;
branches;
next	1.4;

1.4
date	2007.07.14.13.15.16;	author ranji;	state Exp;
branches;
next	1.3;

1.3
date	2007.06.17.21.46.33;	author Roberto;	state Exp;
branches;
next	1.2;

1.2
date	2007.02.15.14.16.24;	author Roberto;	state Exp;
branches;
next	1.1;

1.1
date	2007.01.21.02.02.25;	author Roberto;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Added comment that Query is responsible for deleting inline allocated
Condition objects.
@
text
@// $RCSfile: Query.h,v $
// $Revision: 1.8 $

#ifndef QueryClass
#define QueryClass

#include "BucketList.h"
#include "Condition.h"
#include "Record.h"

class Query
{
  friend class ViewJoin;

public:
  Query();
  Query(const char* name);
  Query(Query &q);
  //
 ~Query();

  bool Match(Record* rec=0);

  Query& operator =(Condition& c);
  Query& operator&=(Condition& c); // TBD
  Query& operator|=(Condition& c); // TBD
  // Note: Query also is responsible for the deletion of
  //       dynamically allocated Condition objects.

  Query& operator&&(Query& q);
  Query& operator&=(Query& q);
  Query& operator||(Query& q);
  Query& operator|=(Query& q);

  bool QueryEdit(short condition_id, Value& val);
  bool QueryEdit(short condition_id, unsigned u);
  bool QueryModifyConditionFirst(Value* val, eCondOperatorType typ=eCondOper_Invalid);

  void Print();
  void p() { Print(); }

private:
  BucketList<Condition> mConditionBktList;

  const char*    mpName; // name is needed when queries have to be persistent
};

#endif

// End
@


1.8
log
@1. Added friend class: ViewJoin.
@
text
@d2 1
a2 1
// $Revision: 1.7 $
d27 2
@


1.7
log
@1. Removed friend function Record::Match(query) and Value::Match(query),
   replaced it with member function Match(query).
@
text
@d2 1
a2 1
// $Revision: 1.6 $
d13 2
@


1.6
log
@1. Added option to edit a query using QueryEdit(unsigned|Value), permits reuse.
2. Moved position where friend functions are declared (moved to the top).
@
text
@d2 1
a2 1
// $Revision: 1.5 $
d8 1
a10 2
class Condition;

a12 3
  friend bool Record::Match(Query *q);
  friend bool Value::Match(Query *q);

d18 3
a20 1
  ~Query();
d22 1
a22 1
  Query& operator= (Condition& c);
d33 1
a33 1
  bool QueryModifyConditionFirst(Value* val, eValueOperator=eValueOperatorInvalid);
@


1.5
log
@1. Added comment why mName is needed.
2. Added default constructor, (will not have a name). Since many queries
   are used only locally this avoids coming up with query names.
3. Changed return type to bool from eBoolean for Record & Value Match().
4. Added functions oeprator&=(Query), operator|=(Query).
5. Added ability to edit the first condition in a query using function
   QueryModifyConditionFirst(...).
6. Added Print().
@
text
@d2 1
a2 1
// $Revision: 1.4 $
a13 1
public:
d17 1
d33 2
@


1.4
log
@1. Made new function Value::Match(Query *q) a friend function of Query.
@
text
@d2 1
a2 1
// $Revision: 1.3 $
d15 2
a16 2
  friend eBoolean Record::Match(Query *q);
  friend eBoolean Value::Match(Query *q);
d18 1
d20 2
d25 2
a26 2
  Query& operator&=(Condition& c);
  Query& operator|=(Condition& c);
d29 1
d31 1
d33 4
a36 1
  short HasConditions() { return mHasConditions; }
d41 1
a41 2
  short          mHasConditions;
  const char*    mName;
@


1.3
log
@Query class header simplified from 100+ lines to 38 due to 1 below.
1. Query no longer composed of child queries but Condition objects.
2. Removed uneeded #include "Value.h".
3. Aligned function declarations.
4. Needed to make Record::Match(Query) friend of Query.
5. Added placeholder for operator&&(Query) and operator||(Query).
@
text
@d1 2
a2 2
// $RCSfile$
// $Revision$
d16 1
@


1.2
log
@1. Preparing for Bit class support.
2. Improved code alignment.
@
text
@d1 2
a2 2
// $RCSfile: Query.h,v $
// $Revision: 1.1 $
d7 1
d9 2
a10 3
#include "Global.h"
#include "BucketList.h"
#include "Value.h"
d15 3
a17 2
  Query(const char* attrib_name);
  Query(Query& q);
d20 3
a22 7
  friend eBoolean Record::Match(Query& q);

  // Shortcuts for use insinde the debugger (gdb):
  void p();
  void pp() {qBucketList.p(); }
  void d();
  void Name(FILE* fp);
d27 1
a27 66
  /* operators for different types */
  /* which can intialize the query */
  Query& operator< (Value& val);
  Query& operator> (Value& val);
  Query& operator>=(Value& val);
  Query& operator<=(Value& val);
  Query& operator==(Value& val);
  Query& operator!=(Value& val);
  Query& operator%=(Value& val);

  Query& operator< (int val);
  Query& operator> (int val);
  Query& operator>=(int val);
  Query& operator<=(int val);
  Query& operator==(int val);
  Query& operator!=(int val);

  Query& operator< (unsigned val);
  Query& operator> (unsigned val);
  Query& operator>=(unsigned val);
  Query& operator<=(unsigned val);
  Query& operator==(unsigned val);
  Query& operator!=(unsigned val);

  Query& operator< (short val);
  Query& operator> (short val);
  Query& operator>=(short val);
  Query& operator<=(short val);
  Query& operator==(short val);
  Query& operator!=(short val);

  Query& operator< (unsigned short val);
  Query& operator> (unsigned short val);
  Query& operator>=(unsigned short val);
  Query& operator<=(unsigned short val);
  Query& operator==(unsigned short val);
  Query& operator!=(unsigned short val);

  Query& operator< (char* val);
  Query& operator> (char* val);
  Query& operator>=(char* val);
  Query& operator<=(char* val);
  Query& operator==(char* val);
  Query& operator!=(char* val);

  Query& operator< (const char* val);
  Query& operator> (const char* val);
  Query& operator>=(const char* val);
  Query& operator<=(const char* val);
  Query& operator==(const char* val);
  Query& operator!=(const char* val);

  // Bit range operator to support bit-select comparison
  Query& operator[](const char* width_str);

  /* Access functions */
  const char* Attribute()   { return attributeName; }
  eOperator   Operator()    { return oper;          }
  Value&      GetValue()    { return value;         }
  short       GetMsb()      { return msbBit;        }
  short       GetLsb()      { return lsbBit;        }
  eBoolean    BitWidthSet() { return bitWidthSet;   }

  /* Debug functions */
  void Print(FILE* fp);
  void Dump(FILE* fp);
d30 4
a33 7
  BucketList<Query> qBucketList;
  eOperator         oper;
  const char*       attributeName;
  Value             value;
  short             lsbBit;
  short             msbBit;
  eBoolean          bitWidthSet;  
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
// $RCSfile:$
// $Revision:$
d32 2
a33 2
  Query& operator<(Value& val);
  Query& operator>(Value& val);
d40 2
a41 2
  Query& operator<(int val);
  Query& operator>(int val);
d47 2
a48 2
  Query& operator<(unsigned val);
  Query& operator>(unsigned val);
d54 2
a55 2
  Query& operator<(short val);
  Query& operator>(short val);
d61 2
a62 2
  Query& operator<(unsigned short val);
  Query& operator>(unsigned short val);
d68 2
a69 2
  Query& operator<(char* val);
  Query& operator>(char* val);
d75 2
a76 2
  Query& operator<(const char* val);
  Query& operator>(const char* val);
d86 6
a91 3
  const char* Attribute() { return attributeName; }
  eOperator Operator() { return oper; }
  Value& GetValue() { return value; }
d104 1
@
