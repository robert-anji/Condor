head	1.3;
access;
symbols;
locks; strict;
comment	@// @;


1.3
date	2010.09.21.21.33.22;	author ranji;	state Exp;
branches;
next	1.2;

1.2
date	2009.08.02.02.15.15;	author ranji;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.19.01.38.40;	author ranji;	state Exp;
branches;
next	;


desc
@@


1.3
log
@1. Moved dump file name argument fromconstructor to DumpStart(module, dumpname).
2. Implemented new DumpSignalDefinition(FILE*, Signal).
3. Implemented new DumpSimulationTime().
4. Allow dump with same vcd code for input & output signals in VcdDefinitions().
5. Need to skip vcd definitions for processes that have no interface.
6. Added missing 'end of definitions' to vcd dump.
7. Fixed DumpValueChanged(), print value and then vcd identifier, was reversed.
@
text
@// $RCSfile: Vcd.cc,v $
// $Revision: 1.2 $

#include <string.h>

#include "Vcd.h"
//
#include "Global.h"
#include "Interface.h"
#include "Module.h"
#include "Process.h"
#include "Record.h"

M_ExternConstructDestructCountInt;

Vcd::Vcd() :
  mDumpState           (eDumpNotStarted),
  mpFpDump             (0),
  mpFpNull             (0),
  mIdentifierGenerate0 (cVcdSignalIdentifierStart),
  mIdentifierGenerate1 (cVcdSignalIdentifierStart-1),
  mIdentifierGenerate2 (cVcdSignalIdentifierStart-1)
//mIdentifierCode      ({'\0', '\0', '\0', '\0'})
{
  M_UpdConstructCount(eType_Vcd);
}

Vcd::~Vcd()
{
  if (mpFpDump) { fclose(mpFpDump); mpFpDump = 0; }

  M_UpdDestructCount(eType_Vcd);
}

void Vcd::DumpStart(Module* module, const char* dump_filename)
{
  mDumpFileName = dump_filename;

  if (mDumpState == eDumpStarted
  ||  mDumpState == eDumpResumed)
  {
    return;
  }

  mDumpState = eDumpStarted;

  // Dump signals in vcd format, for example:
  //  $date Fri Dec 26 17:14:05 2008 $end
  //  $version Icarus Verilog        $end
  //  $timescale 1s                  $end
  //  $scope module tb_intc          $end
  //  $var reg 1 ! clk               $end
  //  $upscope                       $end
  //  $scope module tb_intc          $end
  //  $scope module int0             $end
  //  $var wire 1 ' irq              $end
  //  $var wire 32 ( irqs[31:0]      $end
  //  $upscope                       $end

  // Open file mDumpFileName.
  mpFpDump = fopen(mDumpFileName, "w");
  // Open a dummy file for the first pass.
  mpFpNull = fopen("/dev/null",   "w");

  bool is_first_pass;
  VcdDefinitions(module, is_first_pass=TRUE);
  VcdDefinitions(module, is_first_pass=FALSE);

  fclose(mpFpNull); mpFpNull = 0;

  // Subsequent signal value updates will occur
  // when the Scheduler commits the interfaces.
}

// Per the VCD format specification, we are allowed to use the same code for
// input signals as the output signal driving it. This works for Verdi but
// did not work on GtkWave.
// We need two passes, in the first pass all output signals are given a vcd
// code, inputs are skipped. In the second pass we assign the vcd code of
// inputs by re-using the vcd code of its connected output.
// However, we use a local variable to override this behavior.
void Vcd::VcdDefinitions(Module* module, bool is_first_pass)
{
  FILE* fp;
  bool  is_second_pass = !is_first_pass;
  bool  use_same_code  = FALSE; // set to true for Verdi and false for GtkWave,
                                // change to globally configurable option later
  bool  needs_pass2    = use_same_code;

  if (is_second_pass && !use_same_code) return; // second pass is only for 'same code'

  // Play a trick with fp, we dont want to print on pass1 if 2 passes are reqd.
  if      (is_first_pass && !needs_pass2) fp = mpFpDump;
  else if (is_first_pass &&  needs_pass2) fp = mpFpNull;
  else if (is_second_pass               ) fp = mpFpDump;

  if (module->ParentModule()==0) {
    // For topmost module (has no parent) print date, version and timescale.
    fprintf(fp, "$date\n    Mon Jan 01 00:00:01 2009\n$end\n");
    fprintf(fp, "$version\n    CondorSimulator 0.7\n$end\n");
    fprintf(fp, "$timescale\n    1ns\n$end\n");
  }

  // Create definitions for this module.
  fprintf(fp, "$scope module %s $end\n", module->Name());

  for (M_ListIterateAll(module->mProcessesList)) {
    // IMPR: Maybe let module return an interface list, makes Vcd independent of Process.
    Process* process = module->mProcessesList.Get();
    assert(process);

    Interface* intf = process->InterfaceGet();

    // Non sync/async processes have no interface, ignore them.
    if (intf == 0) continue;

    fprintf(fp, "$scope module %s $end\n", intf->Name());

    for (M_ListIterateAll(intf->mSignalList)) {
      Signal* signal = intf->mSignalList.Get();
      assert(signal);

      bool is_output;

      if (signal->IsDrivingSignal()) is_output = TRUE;
      else                           is_output = FALSE;

      if (is_first_pass && is_output || !use_same_code) {
        signal->VcdIdentifierSet(VcdSignalIdentifierNew());
      }

      if (is_second_pass && !is_output && use_same_code) {
        // Per the VCD format specification, we are allowed to use the
        // same code for input signals as the output signal driving it.
        Signal* s1 = signal->mConnectedSignalsList.Get();
        if (!s1) {
          printf("Error: signal %s is not driven", signal->Name()), M_FL;
          assert(0);
        }

        signal->VcdIdentifierSet(s1->VcdIdentifierGet());
      }

      if ((is_first_pass && !needs_pass2) || is_second_pass) DumpSignalDefinition(fp, signal);
   }

    // Second, create definitions for all sub-modules (call same function (recursion)).
    for (M_ListIterateAll(module->mSubModulesList)) {
      Module* sub_mod = module->mSubModulesList.Get();
      assert(sub_mod);

      VcdDefinitions(sub_mod, is_first_pass);
    }

    fprintf(fp, "$upscope $end\n");
  }

  if (module->ParentModule()==0) {
    // Print the end of definitions if this is the topmost module (no parent).
    fprintf(fp, "$upscope $end\n");
    fprintf(fp, "$enddefinitions $end\n");
    fprintf(fp, "#0\n");
    fprintf(fp, "$dumpvars\n");
  }
}

void Vcd::DumpPause()
{
  mDumpState = eDumpPaused;
}

void Vcd::DumpResume()
{
  mDumpState = eDumpResumed;
}

char* Vcd::VcdSignalIdentifierNew()
{
  // Vcd identifiers are one or more ascii characters with ascii codes
  // between 33 and 126 (inclusive), ie a range of 126-33+2 = 95 chars.

  // Generate a new unique identifier:
  // We allow a max of 3 ascii chars. We first generate all codes of 1 char,
  // then 2 chars and then 3 chars. Total combinations: 95 + 95*95 + 95*95*95.
  char vcd_code[4] = {'\0', '\0', '\0', '\0'};
  short i = mIdentifierGenerate0;
  short j = mIdentifierGenerate1;
  short k = mIdentifierGenerate2;

  short start = cVcdSignalIdentifierStart;
  short end   = cVcdSignalIdentifierEnd;

  if      (j==start-1) { vcd_code[0]=i++;                               }
  else if (k==start-1) { vcd_code[0]=i++; vcd_code[1]=j;                }
  else                 { vcd_code[0]=i++; vcd_code[1]=j; vcd_code[2]=k; }

  if (i==end+1) { i=start;   j++; }
  if (j==end+1) { j=start-1; k++; }
  if (k==end+1) { assert(0);      } // out of codes

  mIdentifierGenerate0 = i;
  mIdentifierGenerate1 = j;
  mIdentifierGenerate2 = k;
  strcpy(mIdentifierCode, vcd_code);

  return (char*)mIdentifierCode;
}

void Vcd::DumpSignalDefinition(FILE* fp, Signal* signal)
{
  short w = signal->Width();

  if (w == 1) fprintf(fp, "$var reg %d %s %s $end\n", w, signal->VcdIdentifierGet(), signal->Name());
  else        fprintf(fp, "$var reg %d %s %s [%d:0] $end\n", w, signal->VcdIdentifierGet(), signal->Name(), w-1);
}

void Vcd::DumpValueChange(char vcd_id[4], Bit* bit) const
{
  assert(bit);

  if (mpFpDump) {
    // Vcd format: first print the value then the identifier.
    bit->VcdPrint(mpFpDump);
    fprintf(mpFpDump, "%s\n", vcd_id);
  }
}

void Vcd::DumpSimulationTime(SimulationTime tm)
{
  if (mpFpDump) {
    if (tm != 0) fprintf(mpFpDump, "#%u\n", tm);
    // else: #0 is already added as part of the header.
  }
}

// End
@


1.2
log
@1. Added memory tracking in constructors and destructors.
@
text
@d2 1
a2 1
// $Revision: 1.1 $
d7 1
a7 1

d14 1
a14 4
const short cVcdSignalIdentifierStart = 33;  // Per verilog Spec.
const short cVcdSignalIdentifierEnd   = 126; //        "

M_ExternConstrutDestructCountInt;
d16 1
a16 1
Vcd::Vcd(const char* name) :
a17 1
  mDumpFileName        (name),
d19 1
d30 2
d35 1
a35 1
void Vcd::DumpStart(Module* module)
d37 1
a37 1
  if (mDumpState != eDumpNotStarted) return;
d39 7
a45 1
  mDumpState = eDumpOn;
d60 1
a60 1
  // 1. Open file mDumpFileName.
d62 2
d65 38
a102 3
  // 2. Print date, version, timescale.
  // 3. Print signal definitions for all interfaces.
  // Subsequent signal value updates will be invoked by Scheduler Commit().
d104 2
a105 3
  // 3. Print out the Vcd header declarations.
  return VcdDefinitions(module);
}
d107 3
a109 7
void Vcd::VcdDefinitions(Module* module)
{
  // First create definitions for this module.
  fprintf(mpFpDump, "$scope module %s $end", module->Name());

  for (M_ListIterateAll(module->mListProcesses)) {
    Process* process = module->mListProcesses.Get();
d114 5
d123 28
a150 3
      short w = signal->Width();
      char* code  = VcdSignalIdentifierNew();
      signal->VcdIdentifierSet(code);
d152 1
a152 2
      if (w == 1) fprintf(mpFpDump, "$var reg %d %s %s $end", w, code, signal->Name());
      else        fprintf(mpFpDump, "$var reg %d %s %s [%d:0] $end", w, code, signal->Name(), w);
d154 2
d158 6
a163 6
  // Second, create definitions for all sub-modules (use recursion).
  for (M_ListIterateAll(module->mListSubModules)) {
    Module* sub_mod = module->mListSubModules.Get();
    assert(sub_mod);

    VcdDefinitions(sub_mod);
a164 2

  fprintf(mpFpDump, "$upscope $end");
d169 1
a169 1
  mDumpState = eDumpOff;
d174 1
a174 1
  mDumpState = eDumpOn;
d179 2
a180 2
  // Vcd identifiers are one or more ascii characters
  // with ascii codes between 33 and 126 (inclusive).
d182 3
a184 1
  // Generate a new unique identifier. We allow a max of 3 ascii chars.
d199 1
a199 1
  if (k==end+1) { assert(0); } // out of codes
d209 8
d219 11
d231 2
a232 2
    fprintf(mpFpDump, "%s", vcd_id);
    bit->Print(mpFpDump);
@


1.1
log
@Initial revision
@
text
@d8 1
d17 2
d28 1
d33 1
@
