head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2010.09.21.23.31.09;	author ranji;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.19.01.35.51;	author ranji;	state Exp;
branches;
next	;


desc
@@


1.2
log
@1. Added state eRW_Delay to the state-machine.
2. Changed position of parent_module arg in ProcessExecute().
3. Replaced Execute(ok, intf) with ProcessExecute(ExecuteReason).
4. Added members Timer and Bit.
@
text
@// $RCSfile: Process_RW.h,v $
// $Revision: 1.1 $

#ifndef Process_RWClass
#define Process_RWClass

#include "Bit.h"
#include "Interface.h"

#include "Process.h"
#include "ProcessExecuteReason.h"

class Timer;

class Process_RW : public Process
{
public:
  enum eRW_MasterOrSlave { eRW_Master, eRW_Slave };
  //
  enum eExecuteState     { eRW_WaitForTran, eRW_Addr, eRW_Delay,
                           eRW_WaitForReq,  eRW_WaitForAck, eRW_AckDone };

  Process_RW(const char* name, Module* parent_module, eRW_MasterOrSlave type);
  ~Process_RW();

protected:
  virtual void ProcessExecute(ProcessExecuteReason& exec_reason);

private:
  unsigned            mExecuteState;
  eRW_MasterOrSlave   mRW_MasterOrSlave;
  Timer*              mTimer; // candidate for impl
  Bit                 mBit32; // candidate for impl
};

#endif

// End
@


1.1
log
@Initial revision
@
text
@d7 3
d11 1
d13 1
a13 1
class Module;
d20 1
a20 1
  enum eExecuteState     { eRW_WaitForTran, eRW_Addr,
d23 1
a23 1
  Process_RW(const char* name, eRW_MasterOrSlave type, Module* parent_module);
d27 1
a27 1
  virtual void Execute(bool& all_ok, Interface* intf=0);
d32 2
@
