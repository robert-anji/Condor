head	1.3;
access;
symbols;
locks
	robert:1.3; strict;
comment	@ * @;


1.3
date	2011.12.20.17.25.58;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2011.12.04.01.53.55;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.02.22.44.18;	author ranji;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Added reason: eExecuteReason_SemaphoreGet .
@
text
@// $RCSfile: ProcessExecuteReason.h,v $
// $Revision: 1.2 $

#ifndef ProcessExecuteReasonClass
#define ProcessExecuteReasonClass

enum eExecuteReasonObjType {
  eExecuteReasonObj_Clock,
  eExecuteReasonObj_Interface,
  eExecuteReasonObj_Mailbox,
  eExecuteReasonObj_Event,
  eExecuteReasonObj_Timer,
  eExecuteReasonObj_Trigger
};

enum eExecuteReason
{
  eExecuteReason_Initial,
  eExecuteReason_ClockPosedge,
  eExecuteReason_ClockNegedge,
  eExecuteReason_Event,
  eExecuteReason_InterfaceModified,
  eExecuteReason_MailboxPut,
  eExecuteReason_MailboxGet,
  eExecuteReason_SemaphoreGet,
  eExecuteReason_Scheduler,
  eExecuteReason_TimerDone,
  eExecuteReason_Trigger,
  eExecuteReason_Invalid
};

class ProcessExecuteReason
{
  friend class Scheduler;

public:
  ProcessExecuteReason();
 ~ProcessExecuteReason();

  void* ReasonObjGet(eExecuteReasonObjType reason_obj_type);

  bool mExecutedOk; // TBD: check if we really need this, Process may forget to set this
  eExecuteReason ReasonGet() { return mExecuteReason; }

private:
  eExecuteReason mExecuteReason;
  void*          mpReasonObject;
};

#endif

// End
@


1.2
log
@Expanded the execute reasons (example: reason Mailbox became MailboxGet and MailboxPut).
@
text
@d2 1
a2 1
// $Revision: 1.1 $
d25 1
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
// $Revision: 1.2 $
d18 3
a20 1
  eExecuteReason_Clock,
d23 2
a24 1
  eExecuteReason_Mailbox,
d26 1
a26 1
  eExecuteReason_Timer,
d41 3
a43 1
  bool mExecutedOk;
@
