head	1.3;
access;
symbols;
locks
	robert:1.3; strict;
comment	@ * @;


1.3
date	2011.04.22.21.00.07;	author ranji;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.14.21.26.38;	author ranji;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.19.01.41.26;	author ranji;	state Exp;
branches;
next	;


desc
@@


1.3
log
@1. Made Connect(sig1,sig2,err) a member function (was global).
2. Replaced IsSignalConnectValid() with WhichSignalPropagates().
@
text
@// $RCSfile: Interface.h,v $
// $Revision: 1.2 $

#ifndef InterfaceClass
#define InterfaceClass

#include "List.h"
#include "Module.h"
#include "Signal.h"
#include "String.h"
#include "Simulator.h"

class Attribute;
class Process;
class Table;
class View;
class ViewIterator;

enum eSignalSaveCount {
  eSignalSaveCountDefault = 5
};

enum eInputsModifiedCount {
  eInputsModifiedCount_None,
  eInputsModifiedCount_AtLeastOne,
  eInputsModifiedCount_All
};

enum eInterfaceUpdateMode {
  eIntfUpdMode_InputsAny,
  eIntfUpdMode_InputsAll,
  eIntfUpdMode_InputsNone
};

enum eInterfaceModifier {
  eIntfModifier_None,
  eIntfModifier_SignalDirInvert,
  eIntfModifier_SignalDirMonitorMode,
  eIntfModifier_Invalid
};

struct InterfaceDescriptionStruct {
  int            signal_pos;
  const char*    signal_name;
  short          signal_width;
  eSignalType    signal_type;
  const char*    signal_group;
};
typedef InterfaceDescriptionStruct InterfaceDescription;

class Interface
{
  friend class Scheduler;
  friend class Vcd;
  friend class Module;

public:
  Interface(const char* name, const InterfaceDescription* intf_desc, eInterfaceModifier mod=eIntfModifier_None);
  ~Interface();

  // Create sub-interfaces.
  Interface* SubInterfaceGet(const char* group_name);

  // Control functions:
  bool  HistoryDepth(short count);
  bool  SetOwningProcess(Process* process);

  // Compare functions:
  bool operator==(Bit& bit);
//bool operator!=(Bit& bit);
//bool operator> (Bit& bit);
//bool operator< (Bit& bit);
//bool operator<=(Bit& bit);
//bool operator>=(Bit& bit);
  bool operator==(unsigned u);

  // Set and retrieve Interface signal values (read returns committed values).
  bool         operator=(Bit&       bit);    // set (write) output signal
  bool         operator=(Signal&    signal); // set (write) input  signal
  bool         operator=(unsigned   u);      // set (write) input  signal
  // bool Bit::operator=(Interface& intf);   // get (read) signal
  // Helper functions for this are:
  Interface& operator[](int signal_pos);
  Interface& operator[](const char* signal_name);
  bool       GetCommittedValue(Bit& bit);  // used when: bit = intf[signal];
  // Thus use:
  //   intf[signal_name] = bit;               // to write a signal
  //   intf[signal_name] = signal;            //         "
  //   intf[signal_name] = u;                 //         "        , or
  //   bit               = intf[signal_name]; // to read a signal

  Signal* SignalGet(const char* name);
  void    SetInputsUpdated();

  // Connect two signals together.
  void Connect(Signal* signal1, Signal* signal2, bool& connect_error);

  // Query functions.
  bool          IsSubInterface() const { return (mpParentInterface != 0);    }
  const char*   Name()           const { return (const char*)mInterfaceName; }
  bool          IsSynchronous()  const { return mIsSynchronous;              }
  //
  eInterfaceModifier InterfaceModifierGet() const { return mIntfModifier; }

  const InterfaceDescription* mpInterfaceDescription;

private:
  List<Signal>  mSignalList; // stores 'new' values of interface signals
  Signal**      mppSignals;
  bool*         mpSubIntfSignalPosValid;
  String        mInterfaceName;
  Process*      mpOwningProcess;
  //
  Table*        mpSignalsTable;
  View*         mpSignalsView; // stores 'current' values of interface signals
  ViewIterator* mpSignalsViewIter;
  short         mSignalTotal;
  short         mSignalPos;
  unsigned      mSignalSaveCount;
  unsigned      mSignalCommitCount;
  Interface*    mpParentInterface;
  bool          mNeedsCommit;
  bool          mIsSynchronous;
  bool          mInputsUpdated;

  const Attribute*     mpSignalAttr;
  eInterfaceUpdateMode mIntfUpdateMode; //check if we still have need for this var
  eInterfaceModifier   mIntfModifier;

  // Private member functions:
  // Sub-interface constructor.
  Interface(const char* intf_name, Interface* parent_intf);
  //
  void SetAsSynchronous() { mIsSynchronous = TRUE; }
  //
  // Propagate the interface signals to connected signals as required.
  void  PropagateInterfaceSignals(bool& all_ok); //
  short WhichSignalPropagates(Signal* signal1, Signal* signal2, eModuleRelation mod_relation) const;
  short Commit(); // reserved for friend class: Scheduler
  //
  void NeedsCommit(bool flag) { mNeedsCommit = flag; }
  bool NeedsCommit()          { return mNeedsCommit; }

  // Temporary members (avoids repeated constructor/destructor calls).
  Bit  impSignalBit;
};

#endif

// End
@


1.2
log
@1.  Removed enums: eInterfaceType, eInterfaceConnectMode.
2.  Added signal_pos to InterfaceDescriptionStruct.
3.  Added operator[signal_pos] for faster signal access.
4.  Added global task to connect signals together.
5.  Made Module class a friend.
6.  Added SetOwningProcess(Process*).
7.  Removed function InterfaceNeedsCommit(), InterfaceType().
8.  Added function IsSynchronous(), SetAsSynchronous()
9.  Removed mpSignalClock.
10. Added mpSignalsViewIter, mSignalPos, mSignalSaveCount, mSignalCommitCount,
    mNeedsCommit, mIsSynchronous, mInputsUpdated, mIntfModifier.
11. Added arg sub_intf_name to sub-interface constructor.
12. Removed InputsReady().
@
text
@d2 1
a2 1
// $Revision: 1.1 $
d8 1
a50 5
// Connect two signals together.
void Connect(Signal* signal1, Signal* signal2, bool& connect_error);
// Check if signals can be legally connected.
bool IsSignalConnectValid(eSignalType signal_type1, eSignalType signal_type2);

d95 3
d136 3
a138 3
  // Propagate the interfaces outputs to any connected signals.
  void  PropagateOutputs(bool& all_ok);
  //
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
#include "MyString.h"
d12 1
a12 1
class Clock;
d16 1
d18 2
a19 2
enum eSignalHistoryDepth {
  eSignalHistoryDepthDefault = 10
a27 7
enum eInterfaceType {
  eInterfaceType_Clock,
  eInterfaceType_Asynchronous,
  eInterfaceType_Synchronous,
  eInterfaceType_Invalid
};

a33 5
enum eInterfaceConnectMode {
  eInterfaceConnectMode_ByName,
  eInterfaceConnectMode_ByPosition
};

d42 1
d50 5
a56 1
public:
d59 1
d61 1
d66 1
a66 4
  Interface* SubInterfaceGet(const char* sub_intf_name);

  friend void Connect(Signal* signal1, Signal* signal2, bool& connect_error);
  friend bool Connect(Interface* intf1, const char* group1, Interface* intf2, const char* group2, eInterfaceConnectMode connect_mode);
d70 1
a70 1
  void  InterfaceNeedsCommit();
d81 1
a81 1
  // Set and retrieve Interface signals values (read returns committed values).
d87 2
a88 1
  Interface& operator[](const char* signal);
d91 3
a93 3
  //   intf[signal_name] = bit;               // to write a signal, or
  //   intf[signal_name] = signal;            //         "        , or
  //   intf[signal_name] = u;                 //         "
d97 1
d100 5
a104 2
  eInterfaceType InterfaceType() const;
  bool IsSubInterface() const { return (mpParentInterface != 0); }
a106 1
  const char* Name() { return (const char*)mInterfaceName; }
d109 5
a113 1
  List<Signal> mSignalList;
d115 11
a125 7
  String       mInterfaceName;
  Signal*      mpSignalClock;       // pointer to clock signal if synchronous
  Table*       mpSignalsTable;      // record/track changes to interface values
  View*        mpSignalsView;       //                      "
  short        mSignalHistoryDepth; //                      "
  Interface*   mpParentInterface;
  bool         mDump;               // flag to check if dumping is to be enabled
d128 2
a129 2
  eInterfaceUpdateMode mIntfUpdateMode;
  bool                 mNeedsCommit;
d133 3
a135 1
  Interface(Interface* parent_intf);
a138 1
  bool  InputsReady();
d140 1
a140 1
  short Commit(); // reserved for friend class Scheduler
d144 3
a146 3
  //
  void InputsProcessedDone();
//bool InputsProcessed() { return mInputsProcessed; }
@
