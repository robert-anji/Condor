head	1.6;
access;
symbols
	C1_80:1.1;
locks; strict;
comment	@// @;


1.6
date	2011.08.21.22.46.58;	author robert;	state Exp;
branches;
next	1.5;

1.5
date	2011.06.26.15.33.37;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.19.11.46.04;	author ranji;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.23.23.12.49;	author ranji;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.22.19.11.04;	author ranji;	state Exp;
branches;
next	1.1;

1.1
date	2007.07.14.14.30.36;	author ranji;	state Exp;
branches;
next	;


desc
@@


1.6
log
@1. Added friend function so that Condition can access the Value.
2. Implemented the unsigned comparison operators to return Condition obj's.
@
text
@// $RCSfile: Aggregate.cc,v $
// $Revision: 1.5 $

#include <assert.h>

#include "Aggregate.h"
//
#include "Attribute.h"
#include "Condition.h"
#include "DBDefines.h"
#include "Value.h"
#include "View.h"

M_ExternConstructDestructCountInt;

Aggregate::Aggregate(View *view, eAggregateType aggr_type, const Attribute* attr) :
  mpAttribute         (attr),
  mAggregateType      (aggr_type),
  mpValue             (0),
  mpValueRemainder    (0),
  mUpdateCount        (0),
  mpView              (view)
{
  mpValue = new Value((unsigned)0); M_Constructed(Value);

  if (mAggregateType == eAggr_ValueAverage) {
    mpValueRemainder = new Value((unsigned)0); M_Constructed(Value);
  }

  M_UpdConstructCount(eType_Aggregate);
}

Aggregate::~Aggregate()
{
  if (mpValue) { delete mpValue; mpValue = 0; }

  if (mpValueRemainder) {
    delete mpValueRemainder; mpValueRemainder = 0;
  }

  M_UpdDestructCount(eType_Aggregate);
}

Value* Aggregate::ValueGet() const
{
  return mpValue;
}

Value* Aggregate::ValueRemainderGet() const
{
  return mpValueRemainder;
}

void Aggregate::ValueReset()
{
  mpValue          = (unsigned)0;
  mpValueRemainder = (unsigned)0;
}

void Aggregate::ValueUpdate(eAggregateUpdateReasonType rsn_type, Value *changed_val, Value *old_val)
{
  // TBD: Support negative aggregates.
  unsigned changed_value = (unsigned)changed_val;
  unsigned old_value     = (unsigned)old_val;
  unsigned value         = (unsigned)mpValue;
  unsigned value_rem     = (unsigned)mpValueRemainder;

  switch (mAggregateType) {
    case eAggr_None:
      break;
    case eAggr_ValueAverage:
      switch (rsn_type) {
        case eAggrUpdType_RecordAdd:
          assert (mUpdateCount != UINT_MAX);

          mUpdateCount++;

          value     = (value*(mUpdateCount-1) + changed_value + value_rem)/mUpdateCount;
          value_rem = (value*(mUpdateCount-1) + changed_value + value_rem)%mUpdateCount;
          break;
        case eAggrUpdType_RecordDelete:
          assert(mUpdateCount);

          // Sticky implies not to update on 'Delete'.
          if (mAggrIsSticky) break;

          mUpdateCount--;

          if (mUpdateCount) {
            value     = (value*(mUpdateCount+1) - changed_value + value_rem)/mUpdateCount;
            value_rem = (value*(mUpdateCount+1) - changed_value + value_rem)%mUpdateCount;
          }
          else {
            value     = 0;
            value_rem = 0;
          }
          break;
        case eAggrUpdType_RecordModify:
          value     = (value*(mUpdateCount+1) + changed_value - old_value + value_rem)/mUpdateCount;
          value_rem = (value*(mUpdateCount+1) + changed_value - old_value + value_rem)%mUpdateCount;
          break;
        default:
          assert(0);
      }
      *mpValue          = value;
      *mpValueRemainder = value_rem;
      break;
    case eAggr_ValueMinimum:
      switch (rsn_type) {
        case eAggrUpdType_RecordAdd:
          if (*changed_val < *mpValue) *mpValue = *changed_val;
          break;
        case eAggrUpdType_RecordDelete:
        case eAggrUpdType_RecordModify:
          if (*changed_val <  *mpValue) assert(0);
          if (*changed_val == *mpValue) mpView->ValueMin(mpAttribute, mpValue);
          break;
        default:
          assert(0);
      }
      break;
    case eAggr_ValueMaximum:
      switch (rsn_type) {
        case eAggrUpdType_RecordAdd:
          if (changed_val > mpValue) mpValue = changed_val;
          break;
        case eAggrUpdType_RecordDelete:
        case eAggrUpdType_RecordModify:
          if (*changed_val >  *mpValue) assert(0);
          if (*changed_val == *mpValue) mpView->ValueMax(mpAttribute, mpValue);
          break;
        default:
          assert(0);
      }
      break;
    case eAggr_ValueSum:
      switch (rsn_type) {
        case eAggrUpdType_RecordAdd:
          *mpValue += *changed_val;
          break;
        case eAggrUpdType_RecordDelete:
          *mpValue -= *changed_val;
          break;
        case eAggrUpdType_RecordModify:
          *mpValue += *changed_val;
          *mpValue -= *old_val;
          break;
        default:
          assert(0);
      }
      break;
    case eAggr_RecordsCount:
      switch (rsn_type) {
        case eAggrUpdType_RecordAdd:    *mpValue++; break;
        case eAggrUpdType_RecordDelete: *mpValue--; break;
      }
      break;
    case eAggr_RecordsAdded:
      switch (rsn_type) {
        case eAggrUpdType_RecordAdd:    *mpValue++; break;
      }
      break;
    case eAggr_RecordsDeleted:
      assert(*mpValue > 0); // for record delete value should not be 0

      switch (rsn_type) {
        case eAggrUpdType_RecordDelete: *mpValue--; break;
      }
      break;
    default:
      assert(0);
  }
}

Condition& Aggregate::operator<(unsigned val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c < val;
}

Condition& Aggregate::operator>(unsigned val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c > val;
}

Condition& Aggregate::operator<=(unsigned val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c <= val;
}

Condition& Aggregate::operator>=(unsigned val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c >= val;
}

Condition& Aggregate::operator==(unsigned val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c == val;
}

Condition& Aggregate::operator!=(unsigned val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c != val;
}

// End
@


1.5
log
@Added ability to convert Aggregates into Conditions using overloaded
member functions.
@
text
@d2 1
a2 1
// $Revision: 1.4 $
d44 1
a44 1
const Value* Aggregate::ValueGet() const
d183 39
a221 1
// CONT: Add the remaining overloaded operators to create Conditions.
@


1.4
log
@Allow attributes to be sticky (no update on record delete).
@
text
@d2 1
a2 1
// $Revision: 1.3 $
d9 1
d44 1
a44 1
Value* Aggregate::ValueGet() const
d175 10
@


1.3
log
@ Split DefinesAndEnum.h into DBDefines.h, Global.h and SimulatorDefines.h .
@
text
@d2 1
a2 1
// $Revision: 1.2 $
d83 3
@


1.2
log
@1. Added memory tracking using macro M_UpdConstructCount, M_UpdDestructCount.
2. Fixed prefix to be 'mp' instead of 'm'.
3. Added tracking aggregates for: RecordsCount, RecordsAdded and RecordsDeleted.
@
text
@d2 1
a2 1
// $Revision: 1.1 $
d9 1
a9 1
#include "DefinesAndEnum.h"
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
// $RCSfile$
// $Revision$
d13 4
a16 2
Aggregate::Aggregate(View *view, Attribute *const attr, eAggregateType aggr_type) :
  mAttribute          (attr),
d18 2
a19 2
  mValue              (0),
  mValueRemainder     (0),
d21 1
a21 1
  mView               (view)
d23 1
a23 1
  mValue       = new Value((unsigned)0);
d25 2
a26 2
  if (mAggregateType == eAggregateValue_Average) {
    mValueRemainder = new Value((unsigned)0);
d28 2
d34 1
a34 1
  if (mValue) { delete mValue; mValue = 0; }
d36 2
a37 2
  if (mValueRemainder) {
    delete mValueRemainder; mValueRemainder = 0;
d39 2
d43 1
a43 1
Value* Aggregate::ValueGet()
d45 1
a45 1
  return mValue;
d48 1
a48 1
Value* Aggregate::ValueRemainderGet()
d50 1
a50 1
  return mValueRemainder;
d55 2
a56 2
  mValue          = (unsigned)0;
  mValueRemainder = (unsigned)0;
d64 2
a65 2
  unsigned value         = (unsigned)mValue;
  unsigned value_rem     = (unsigned)mValueRemainder;
d68 1
a68 1
    case eAggregateNone:
d70 1
a70 1
    case eAggregateValue_Average:
d101 2
a102 2
      *mValue          = value;
      *mValueRemainder = value_rem;
d104 1
a104 1
    case eAggregateValue_Minimum:
d107 1
a107 1
          if (*changed_val < *mValue) *mValue = *changed_val;
d111 2
a112 2
          if (*changed_val <  *mValue) assert(0);
          if (*changed_val == *mValue) mView->ValueMin(mAttribute, mValue);
d118 1
a118 1
    case eAggregateValue_Maximum:
d121 1
a121 1
          if (changed_val > mValue) mValue = changed_val;
d125 2
a126 2
          if (*changed_val >  *mValue) assert(0);
          if (*changed_val == *mValue) mView->ValueMax(mAttribute, mValue);
d132 1
a132 1
    case eAggregateValue_Sum:
d135 1
a135 1
          *mValue += *changed_val;
d138 1
a138 1
          *mValue -= *changed_val;
d141 2
a142 2
          *mValue += *changed_val;
          *mValue -= *old_val;
d148 18
@
