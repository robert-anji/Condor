head	1.4;
access;
symbols;
locks
	robert:1.4; strict;
comment	@ * @;


1.4
date	2011.12.03.10.06.23;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.23.23.12.49;	author ranji;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.13.21.24.38;	author ranji;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.19.01.34.47;	author ranji;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Added member mClockEdge to hold the current clock edge and a function
to return the values. Renamed mClockPhaseCurrent to mClockPhase.
@
text
@// $RCSfile: Clock.h,v $
// $Revision: 1.3 $

#ifndef ClockClass
#define ClockClass

#include "Bit.h"
#include "Process.h"
#include "ProcessExecuteReason.h"
#include "Simulator.h"
#include "SimulatorDefines.h"
#include "String.h"

class Interface;
class Module;

enum eClockPhase {
  eClockPhase_JustBeforePositiveEdge,
  eClockPhase_JustAfterPositiveEdge,
  eClockPhase_JustBeforeNegativeEdge,
  eClockPhase_JustAfterNegativeEdge,
  eClockPhase_Default = eClockPhase_JustAfterNegativeEdge,
  eClockPhase_Invalid
};

class Clock : public Process
{
  friend class Scheduler;

public:
  Clock(const char* name, Module* parent_module, unsigned half_period, eTimeScale s, eClockPhase phase=eClockPhase_Default);
  ~Clock();

  eSignalEdge    ClockEdgeGet()  const { return mClockEdge; }
  eTimeScale     TimeScaleGet()  const { return mTimeScale; }

  Clock& operator()(unsigned u); // experiment

  virtual eProcessType ProcessType() const;

protected:
  // Used by friend class Scheduler.
  virtual void ProcessExecute(ProcessExecuteReason& exec_reason);
  bool            Start();
  bool            ProcessStateModify(eProcessState new_state);
  SimulationTime  SimTimeForNextClockEdgeGet(eSignalEdge clk_edge);
  //
  unsigned        HalfPeriodGet()          const { return mHalfPeriod;              }
  SimulationTime  NextTransitionTimeGet()  const { return mClockNextTransitionTime; }

private:
  SimulationTime  mClockStartTime;
  SimulationTime  mClockNextTransitionTime;
  unsigned        mHalfPeriod;
  eTimeScale      mTimeScale;
  eClockPhase     mClockPhaseStart;
  eClockPhase     mClockPhase;
  eSignalEdge     mClockEdge;
  Bit             mBit;
  bool            mClockScheduleSuspend;
};

#endif

// End
@


1.3
log
@[2010_Sep_22]
Split DefinesAndEnum.h into DBDefines.h, Global.h and SimulatorDefines.h .
@
text
@d2 1
a2 1
// $Revision: 1.2 $
d34 3
a37 1
  eTimeScale     TimeScaleGet()  const { return mTimeScale; }
d57 2
a58 1
  eClockPhase     mClockPhaseCurrent;
@


1.2
log
@1. Moved 'starting phase' from Start() to Clock constructor.
2. ProcessExecute() now uses ExecuteReason argument instead of bool and intf.
3. Made several functions protected instead of public.
4. Added enum for default clock phase.
5. Added function TimeScaleGet().
6. Removed function Running(), this info is available via ProcessStateGet().
7. Added variable mClockScheduleSuspend to help implement suspending a clock.
8. Renamed eTimeUnit to eTimeScale.
9. Removed 'initial delay' for clock start, can be achieved by other means.
@
text
@d2 1
a2 1
// $Revision: 1.1 $
a7 2
#include "DefinesAndEnum.h"
#include "String.h"
d11 2
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
#include "MyString.h"
d11 1
d14 3
d22 1
a27 1
public:
d30 2
a31 1
  Clock(const char* name, unsigned half_period, eTimeUnit s, Module* module);
d34 2
a35 6
  bool           Start(eClockPhase clk_phase, SimulationTime initial_delay=0);
  SimulationTime GetSimTimeForNextClockEdge(eClockEdge clk_edge);
  //
  unsigned       HalfPeriodGet() const { return mHalfPeriod; }
  SimulationTime StartTimeGet()  const { return mClockStartTime; }
  bool           Running()       const { return mClockIsRunning==TRUE; }
a36 1
  // Base class related.
d40 8
a47 1
  virtual void Execute(bool& all_ok, Interface* intf=0);
d51 1
a51 1
  SimulationTime  mClockNextActiveTime;
d53 1
a53 1
  eTimeUnit       mTimeUnit;
d57 1
a57 4
  bool            mClockIsRunning;

  //
  void            NextActiveTime();
@
