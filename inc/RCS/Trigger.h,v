head	1.7;
access;
symbols
	C1_80:1.1;
locks; strict;
comment	@ * @;


1.7
date	2011.06.26.15.58.51;	author robert;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.25.13.32.36;	author ranji;	state Exp;
branches;
next	1.5;

1.5
date	2011.01.30.07.43.12;	author ranji;	state Exp;
branches;
next	1.4;

1.4
date	2010.09.23.23.12.49;	author ranji;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.15.01.04.30;	author ranji;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.19.15.59.11;	author ranji;	state Exp;
branches;
next	1.1;

1.1
date	2007.07.14.14.13.40;	author ranji;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Removed needing Aggregate, Aggregate is handled within Query.
@
text
@// $RCSfile: Trigger.h,v $
// $Revision: 1.6 $

#ifndef TriggerClass
#define TriggerClass

#include "DBDefines.h"
#include "Database.h"
#include "String.h"

class Condition;
class Query;
class Record;
class View;

enum eTriggerState {
  eTriggerState_Active,
  eTriggerState_Suspended,
  eTriggerState_RemoveTrigger // TBD: Remove this enum, use _Suspended instead
};

class Trigger
{
  friend class Table;

public:
  Trigger(const char* trg_name, eTriggerType type, void* trg_owner_obj, TriggerActionFnPtr fn_ptr, View* v, Query* q=0, Record* rec=0);
 ~Trigger();

  virtual void    TriggerActionExecute();

  bool            TriggerStateSet(eTriggerState trg_state);
  eTriggerState   TriggerStateGet()          const;
  eTriggerType    TriggerType()              const;

  bool            TriggerMatch(Record *rec=0);
  void            TriggerRecordSet(Record* rec) { mpRecord = rec; }

  void*           TriggerOwnerObjGet() const { return mpTriggerOwnerObj; }
  View*           ViewGet() const            { return mpView;            }

private:
  // Data:
  String               mName;
  eTriggerType         mTriggerType;
  TriggerActionFnPtr   mTriggerActionFnPtr;
  void*                mpTriggerOwnerObj;
  View*                mpView;
  Query*               mpQuery;
  Record*              mpRecord; // supplied record, or record for trigger match
//Condition*           mpCondition;
  eTriggerState        mTriggerState;   // Active, Suspended
  int                  mMatchedCount;

  // Functions:
  void     Clear();
};

#endif

// End
@


1.6
log
@1. Removed Simulator classes (Process, Scheduler) to make Trigger independent
   of Simulator. New class EventFromTrigger handles it instead.
2. Added trigger name to constructor.
3. Removed MatchView() as mpView in ViewInfo is not declared const anymore.
[2010Sep28: Implement Event's based on Trigger's in a new class: EventFromTrigger.]
@
text
@d2 1
a2 1
// $Revision: 1.5 $
a10 1
class Aggregate;
a27 2
  Trigger(const char* trg_name, eTriggerType type, void* trg_owner_obj, TriggerActionFnPtr fn_ptr, View* v, Query* q, Aggregate* aggr);
  //
d36 1
a36 2
  bool            TriggerMatchRecord(Record *rec);
  bool            TriggerMatchAggregate();
a50 1
  Aggregate*           mpAggregate;
@


1.5
log
@1. Renamed TriggerRecordMatch() to TriggerMatchRecord().
2. Marked code that can be removed once TriggerEvent class is ready.
@
text
@d2 1
a2 1
// $Revision: 1.4 $
a6 2
// TBD1: Make Trigger independent of Simulation, use TriggerEvent class instead.

d9 1
a9 1
#include "Scheduler.h" // TBD1: remove
a12 1
class Process; // TBD1: remove
a24 1
  friend class Scheduler; // TBD1: remove
d28 2
a29 2
  Trigger(eTriggerType type, void* trg_owner_obj, TriggerActionFnPtr fn_ptr, View* v, Query* q=0, Record* rec=0);
  Trigger(eTriggerType type, void* trg_owner_obj, TriggerActionFnPtr fn_ptr, View* v, Query* q, Aggregate* aggr);
d33 2
a38 1
  bool            MatchView(const View *view) const { return (view==mpView); }
a44 5
  Process*        BlockedProcessGet() const  { return mpBlockedProcess;  } // TBD1: remove
  void            BlockedProcessClear()      { mpBlockedProcess = 0;     } // TBD1: remove

protected:
  virtual void    TriggerActionExecute();
d48 1
a58 1
  Process*             mpBlockedProcess; // TBD1: remove
a60 1
  void     TriggerProcessSet (Process* process)      { mpBlockedProcess    = process; } // TBD1: remove
@


1.4
log
@ Split DefinesAndEnum.h into DBDefines.h, Global.h and SimulatorDefines.h .
@
text
@d2 1
a2 1
// $Revision: 1.3 $
d7 2
d11 1
a11 1
#include "Scheduler.h"
d15 1
a15 1
class Process;
d23 1
a23 1
  eTriggerState_RemoveTrigger
d28 1
a28 1
  friend class Scheduler;
d32 4
a35 3
  Trigger(eTriggerType type, void* trg_owner_obj, View* v, Query* q=0, Record* rec=0);
  Trigger(eTriggerType type, void* trg_owner_obj, View* v, Aggregate* aggr, Query* q=0);
  ~Trigger();
d42 1
a42 1
  bool            TriggerRecordMatch(Record *rec);
d48 5
a52 2
  Process*        BlockedProcessGet() const  { return mpBlockedProcess;  }
  void            BlockedProcessClear()      { mpBlockedProcess = 0;     }
d66 1
a66 1
  Process*             mpBlockedProcess;
d69 1
a69 3
  void     TriggerActionExecute();
  void     TriggerActionFnSet(TriggerActionFnPtr fn) { mTriggerActionFnPtr = fn;      }
  void     TriggerProcessSet (Process* process)      { mpBlockedProcess    = process; }
@


1.3
log
@1. Cosmetic change (changed location where friend class is declared).
@
text
@d2 1
a2 1
// $Revision: 1.2 $
d7 1
a7 1
#include "DefinesAndEnum.h"
@


1.2
log
@1. Changed return type of TriggerMatchRecord(), TriggerMatchAggregate to
   bool from eBoolean, also did the same for Match(View*).
2. Fixed member prefix (ie added 'mp' and 'm').
3. Added to eTriggerState enum: eTriggerState_RemoveTrigger
4. Made Scheduler class a friend.
5. Using single task to set/get trigger state.
6. Trigger supports block/unblock of a process.
7. Added functions: bool  TriggerRecordMatch(Record *rec),
                    void* TriggerOwnerObjGet(),
                    View* ViewGet(),
                    Process* BlockedProcessGet()
                    void  BlockedProcessClear()
@
text
@d2 1
a2 1
// $Revision: 1.1 $
a25 1
public:
d29 1
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
// $RCSfile$
// $Revision$
d9 1
d13 1
d20 2
a21 1
  eTriggerState_Suspended
d27 1
a28 1
  friend class Database;
d30 3
a32 7
  Trigger(eTriggerType type, TriggerActionFnPtr fn, void *trg_owner_obj, View *v, Query *q=0, Record *rec=0);
  Trigger(eTriggerType type, TriggerActionFnPtr fn, void *trg_owner_obj, View *v, Aggregate *aggr, Query *q=0);

  eBoolean      TriggerSuspend();
  eBoolean      TriggerActivate();
  eTriggerState TriggerState();
  eTriggerType  TriggerType();
d34 13
a46 1
  eBoolean      Match(View *view) { if (view==mView) return TRUE; else return FALSE; }
a48 6
  // Functions:
  ~Trigger();
  void     TriggerActionExecute();
  eBoolean TriggerMatchRecord(Record *rec);
  eBoolean TriggerMatchAggregate();

d52 15
a66 7
  void                *mTriggerOwnerObj;
  View                *mView;
  Query               *mQuery;
  Record              *mRecord; // supplied record, or record for trigger match
  Aggregate           *mAggregate;
//Condition           *mCondition;
  eTriggerState        mTriggerState; // Active, Suspended
@
