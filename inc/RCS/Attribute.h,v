head	1.9;
access
	Roberto;
symbols
	C1_80:1.2
	C1_70:1.1
	C1_00:1.1;
locks; strict;
comment	@ * @;


1.9
date	2011.12.20.17.24.16;	author robert;	state Exp;
branches;
next	1.8;

1.8
date	2011.09.19.16.23.50;	author robert;	state Exp;
branches;
next	1.7;

1.7
date	2011.08.21.22.50.48;	author robert;	state Exp;
branches;
next	1.6;

1.6
date	2011.06.26.15.38.11;	author robert;	state Exp;
branches;
next	1.5;

1.5
date	2010.09.23.23.12.49;	author ranji;	state Exp;
branches;
next	1.4;

1.4
date	2010.09.13.21.57.04;	author ranji;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.19.15.59.11;	author ranji;	state Exp;
branches;
next	1.2;

1.2
date	2007.07.14.12.51.56;	author ranji;	state Exp;
branches;
next	1.1;

1.1
date	2007.01.21.02.02.25;	author Roberto;	state Exp;
branches;
next	;


desc
@Initial Version.
@


1.9
log
@Added == and != comparison of Attribute with Record pointer.
@
text
@// $RCSfile: Attribute.h,v $
// $Revision: 1.8 $

#ifndef AttributeClass
#define AttributeClass

#include <stdio.h>

#include "DBDefines.h"
#include "Global.h"
#include "String.h"

class Condition;
class Record;
class Table;
class Value;
class View;

eValueType  AttributeStrToType(const char* type_str);
const char* AttributeTypeToStr(eValueType type);

class Attribute
{
  friend class Table;
  friend class ViewJoin;

public:
  inline short PositionGet(void) const { return mPosition; }
  inline void  Name(FILE *fp)          { *this >> fp;      }
  inline const char* Name()      const { return (const char*)mName; }

  // Constructors:
  Attribute();
  Attribute(const char* nm);
  Attribute(const char* nm, eValueType typ,  Value *null_val=0, short bit_width=0);
  Attribute(char* nm);
  Attribute(char* nm, eValueType typ);
  Attribute(Attribute& attr);
  //
  ~Attribute();

  // Overloaded operators needed to convert Attributes into queries on-the-fly.
  #include "ConditionCreateOperators.h"

  Condition& operator==(Record* rec) const;
  Condition& operator!=(Record* rec) const;

  // Comparing attributes needed for Join's.
  Condition& operator< (Attribute attr) const;
  Condition& operator> (Attribute attr) const;
  Condition& operator>=(Attribute attr) const;
  Condition& operator<=(Attribute attr) const;
  Condition& operator==(Attribute attr) const;
  Condition& operator!=(Attribute attr) const;

  // Set view if attribute needs to be qualified for a specific view.
  Attribute& operator[](View* view) { mpView = view; }
  View*      ViewGet() const        { return mpView; }

  // Allow value pointers as RHS operands.
  Condition& operator< (Value* pval) const;

  void   PositionSet(short s) { mPosition = s;    }
  short  BitWidth() const     { return mBitWidth; }
  bool   AttributeIsSame(Attribute* attr);

  inline eValueType ValueType() const { return mValueType; }

  bool     operator>>(FILE* fp);
  bool     operator<<(FILE* fp);

private:
  // Data:
  String      mName;          // user will initially retrieve attributes by name
  eValueType  mValueType;     // type of value for this attribute
  short       mBitWidth;      // needed for value type: Bit ? Remove ?
  short       mPosition;      // used as an index into record value array
  Value*      mpAttrNullValue;// support null values (later)
  Table*      mpTable;        // qualify attribute with Table (View?) for Joins etc.
  View*       mpView;         // qualify attribute with a view (when we have multiple views)
};

#endif

// End
@


1.8
log
@1. Added friend class: ViewJoin.
@
text
@d2 1
a2 1
// $Revision: 1.7 $
d14 1
d45 3
@


1.7
log
@1. Added comparison of Attribute with Attribute to return Condition objects,
   this is needed for Joins.
2. Allow Attribute to be qualified with a View using operator[View], this is
   needed for Joins.
3. Added comparison of Attribute with Value pointer on RHS.
@
text
@d2 1
a2 1
// $Revision: 1.6 $
d24 1
@


1.6
log
@Put the overloaded function declarations to create Conditions into
a separate file as they could be reused (example: Aggregate class).
@
text
@d2 1
a2 1
// $Revision: 1.5 $
d16 1
d43 15
d75 1
@


1.5
log
@[2010_Sep_22]
Split DefinesAndEnum.h into DBDefines.h, Global.h and SimulatorDefines.h .
@
text
@d2 1
a2 1
// $Revision: 1.4 $
d39 2
a40 40
  // Overloaded operators needed to build queries on-the-fly.
  Condition& operator< (unsigned val) const;
  Condition& operator> (unsigned val) const;
  Condition& operator>=(unsigned val) const;
  Condition& operator<=(unsigned val) const;
  Condition& operator==(unsigned val) const;
  Condition& operator!=(unsigned val) const;

  Condition& operator< (int val) const;
  Condition& operator> (int val) const;
  Condition& operator>=(int val) const;
  Condition& operator<=(int val) const;
  Condition& operator==(int val) const;
  Condition& operator!=(int val) const;

  Condition& operator< (short val) const;
  Condition& operator> (short val) const;
  Condition& operator>=(short val) const;
  Condition& operator<=(short val) const;
  Condition& operator==(short val) const;
  Condition& operator!=(short val) const;

  Condition& operator< (char* val) const;
  Condition& operator> (char* val) const;
  Condition& operator>=(char* val) const;
  Condition& operator<=(char* val) const;
  Condition& operator==(char* val) const;
  Condition& operator!=(char* val) const;

  Condition& operator< (const char* val) const;
  Condition& operator> (const char* val) const;
  Condition& operator>=(const char* val) const;
  Condition& operator<=(const char* val) const;
  Condition& operator==(const char* val) const;
  Condition& operator!=(const char* val) const;

  Condition& operator==(void* val) const;
  Condition& operator!=(void* val) const;

  Condition& operator!() const;
d58 1
a58 1
  Table*      mpTable;        // qualify attribute with Table for Joins etc.
@


1.4
log
@1. Changed member mName type from char* to String.
2. Added global functions AttributeStrToType(), AttributeTypeToStr().
@
text
@d2 1
a2 1
// $Revision: 1.3 $
d9 1
a9 1
#include "DefinesAndEnum.h"
@


1.3
log
@1. Added mTable member to reduce instances of attributes getting used for the
   wrong view.
2. Added overloaded comparison operators that will allow us to use attributes
   comparisons when composing queries (instead of needing Condition objects).
3. If attribute type is bit need to know the bit width, added mBitWidth.
4. Made some acces functions const.
5. Add bit width to one of the constructors.
6. Added functions:
     short  BitWidth() const
     bool   AttributeIsSame(Attribute* attr);
     friend const char* AttributeTypeToStr(eValueType type);
     friend eValueType  AttributeStrToType(const char* type_str);
@
text
@d2 1
a2 1
// $Revision: 1.2 $
d9 1
d11 1
a11 1
#include "DefinesAndEnum.h"
d14 1
d17 3
a21 1
public:
d24 1
d27 1
a27 1
  inline const char* Name()      const { return mpName;     }
a87 2
  friend const char* AttributeTypeToStr(eValueType type);
  friend eValueType  AttributeStrToType(const char* type_str);
d91 1
a91 1
  char*       mpName;         // user will initially retrieve attributes by name
@


1.2
log
@1. Added optional 'null' value for attribute.
2. Each attribute now stores its position in the Record.
3. Made Table class a friend.
4. Addded the 'm' prefix to data members.
@
text
@d2 1
a2 1
// $Revision: 1.1 $
d12 1
d20 3
a22 2
  inline short PositionGet(void) { return mPosition; }
  inline void  Name(FILE *fp)    { *this >> fp;      }
d24 1
a24 2
private:
  // Functions:
d27 1
a27 1
  Attribute(const char* nm, eValueType typ, Value *null_val);
d33 42
a74 1
  //
d76 9
a84 3
  //
  eBoolean operator>>(FILE* fp);
  eBoolean operator<<(FILE* fp);
d86 1
d88 6
a93 4
  char*       mName;
  eValueType  mValueType;
  short       mPosition;
  Value      *mAttrNullValue;
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
// $RCSfile:$
// $Revision:$
d10 3
a12 1
#include "Value.h"
d17 7
d26 1
a26 1
  Attribute(const char* nm, eValueType typ);
d30 1
a30 1

d32 3
a34 1

d38 5
a42 4
  char*      name;
  eValueType type;
private:
  // none
@
