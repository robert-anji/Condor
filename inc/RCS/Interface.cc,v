head	1.5;
access;
symbols;
locks
	robert:1.5; strict;
comment	@// @;


1.5
date	2011.04.22.20.59.29;	author ranji;	state Exp;
branches;
next	1.4;

1.4
date	2011.01.30.08.28.27;	author ranji;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.14.21.26.54;	author ranji;	state Exp;
branches;
next	1.2;

1.2
date	2009.08.02.02.15.15;	author ranji;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.19.01.41.37;	author ranji;	state Exp;
branches;
next	;


desc
@@


1.5
log
@1. Made Connect(sig1,sig2,err) a member function (was global).
2. The Connect(sig1,sig2,err) is enhanced to connect sub-modules together
   (needs to allow connecting input->input, output->output).
3. Renamed PropagateOutputs() to PropagateInterfaceSignals() as even inputs
   can be propagated now (for sub-modules).
@
text
@// $RCSfile: Interface.cc,v $
// $Revision: 1.4 $

#include <assert.h>
#include <string.h>

#include "Interface.h"
//
#include "Database.h"
#include "Global.h"
#include "Module.h"
#include "Process.h"
#include "Record.h"
#include "Scheduler.h"
#include "Signal.h"
#include "Table.h"
#include "Vcd.h"
#include "View.h"

extern Database*  gDB;
extern Scheduler* gScheduler;
extern Vcd*       gVcd;
extern int        gDbg;
//
M_ExternConstructDestructCountInt;

// Create an interface consisting of a signal list from an InterfaceDescription
// and also create a table with the same signals as the table attributes.
// The signals in the signal list are used to connect them to other signals and
// also to hold the signal values. The scheduler will commit the signal values
// to the table at the appropriate time. The interface table is needed so that
// interface values can be queried globally.
//
Interface::Interface(const char* intf_name, const InterfaceDescription* intf_desc, eInterfaceModifier modifier) :
  mInterfaceName         (intf_name),
  mpInterfaceDescription (intf_desc),
  mIntfModifier          (modifier),
  mppSignals             (0),
  mpSubIntfSignalPosValid(0),
  mpOwningProcess        (0),
  mSignalSaveCount       (eSignalSaveCountDefault),
  mSignalCommitCount     (0),
  mpParentInterface      (0),
  mpSignalsTable         (0),
  mpSignalsView          (0),
  mpSignalsViewIter      (0),
  mSignalTotal           (0),
  mSignalPos             (SHRT_MAX),
  mIntfUpdateMode        (eIntfUpdMode_InputsAll),
  mpSignalAttr           (0),
  mNeedsCommit           (FALSE),
  mIsSynchronous         (FALSE),
  mInputsUpdated         (FALSE)
{
  assert(mpInterfaceDescription);
  assert(mSignalSaveCount);

  // Cannot use 'Auto-Commit', table needs manual commit by the Scheduler.
  int tbl_open_flags =  eTableOpenFlags_Default;

  mpSignalsTable = gDB->TableOpen(intf_name,  tbl_open_flags);

  mpSignalsView  = mpSignalsTable->ViewCreate("AllSignals",  eRecPerm_All);

  assert(mpSignalsTable);
  assert(mpSignalsView);

  mpSignalsViewIter  = mpSignalsView->ViewIteratorNew();
  assert(mpSignalsViewIter);

  if (!mpSignalsTable->ViewEnable(mpSignalsView, TRUE)) assert(0);
  mpSignalsView->RecordAddDynamic();

  // Add all the signals from the interface description.
  bool done = FALSE;

  const InterfaceDescription* desc     = mpInterfaceDescription;
  Bit*                        init_val = 0;

  // Add signal to list and as attributes to the interface table.
  // TBD: Dont allow more than one clock in an interface.
  for (int i=0; !done; i++) {
    if (!strlen(desc[i].signal_name)) { done=TRUE; mSignalTotal=i; break; }

    Attribute* attr;
    const char* name  = desc[i].signal_name;
    short       width = desc[i].signal_width;
    const char* group = desc[i].signal_group;
    eSignalType type  = desc[i].signal_type;

    switch (modifier) {
    case eIntfModifier_None:
      break;          // leave 'type' unchanged.
    case eIntfModifier_SignalDirInvert:
      if      (type == eSignalType_Input)  type = eSignalType_Output;
      else if (type == eSignalType_Output) type = eSignalType_Input;
      // unchanged: _InOut, _Strap, _None, _Invalid.
      break;
    case eIntfModifier_SignalDirMonitorMode:
      type = eSignalType_Input;
      break;
    default: assert(0);
    }

    if (init_val) {
      Value v; M_Constructed(Value);

      v = *init_val;
      attr = mpSignalsTable->AttributeAdd(name, eValueBit, &v, width);
    }
    else {
      attr = mpSignalsTable->AttributeAdd(name, eValueBit, (Value*)0, width);
    }

    // Check that signal_pos in desc is set correctly otherwise
    // retrieving a signal by position will not work.
    assert (desc[i].signal_pos == i);
    assert (desc[i].signal_pos == attr->PositionGet());

    // Now we are ready to create the Signal.
    Signal* signal = new Signal(name, width, type, group, attr, this, init_val);
    assert(signal);

    mSignalList.Add(signal, eListAddPosition_Last);

    assert(mSignalList.Size() != SHRT_MAX);
  }

  if (mSignalTotal) {
    mppSignals = new Signal* [mSignalTotal];

    short i = 0;

    for (MacroListIterateAll(mSignalList)) {
      Signal* signal = mSignalList.Get();
      assert(signal);

      mppSignals[i++] = signal;
    }
  }

  M_UpdConstructCount(eType_Interface);
}

// Constructor for sub-interfaces.
Interface::Interface(const char* intf_name, Interface* parent_intf) :
  mInterfaceName         (intf_name),
  mpInterfaceDescription (0),
  mIntfModifier          (parent_intf->mIntfModifier),
  mppSignals             (parent_intf->mppSignals),
  mpSubIntfSignalPosValid(0),
  mpOwningProcess        (0),
  mSignalSaveCount       (eSignalSaveCountDefault),
  mSignalCommitCount     (0),
  mpParentInterface      (parent_intf),
  mpSignalsTable         (0),
  mpSignalsView          (0),
  mpSignalsViewIter      (0),
  mSignalTotal           (parent_intf->mSignalTotal),
  mSignalPos             (SHRT_MAX),
  mIntfUpdateMode        (eIntfUpdMode_InputsAll),
  mpSignalAttr           (0),
  mNeedsCommit           (FALSE),
  mIsSynchronous         (parent_intf->mIsSynchronous),
  mInputsUpdated         (FALSE)
{
  assert(mSignalSaveCount);

  M_UpdConstructCount(eType_Interface);
}

Interface::~Interface()
{
  M_ListDeleteAll(mSignalList, Signal);

  if (mpSignalsTable) {
    if (mpSignalsView) {
      if (mpSignalsViewIter) {
        mpSignalsView->ViewIteratorFree(mpSignalsViewIter); mpSignalsViewIter = 0;
      }

      mpSignalsTable->ViewDelete(mpSignalsView); mpSignalsView = 0;
    }

    gDB->TableClose(mpSignalsTable); mpSignalsTable = 0;
  }

  if (mppSignals) {
    delete [] mppSignals; mppSignals = 0;
  }

  if (mpSubIntfSignalPosValid) { delete [] mpSubIntfSignalPosValid; mpSubIntfSignalPosValid=0; M_UpdDestructCountN(eType_Bool, mSignalTotal); }

  M_UpdDestructCount(eType_Interface);
}

// To avoid passing in the entire interface to a process when it actually only
// requires a part of them and to make it easier to connect interfaces to-
// gether, we use the concept of a sub-interface.
// A sub-interface contains only a subset of the signals from the 'parent'
// interface. Also, it does not need its own interface table because all signals
// can already be queried from the parent table.
Interface* Interface::SubInterfaceGet(const char* group_name)
{
  Interface* sub_intf = 0;

  assert (! IsSubInterface()); // no support for sub-interface of sub-interface

  sub_intf = new Interface(group_name, this);
  assert(sub_intf);

  if (mSignalTotal) {
    mpSubIntfSignalPosValid = new bool [mSignalTotal]; M_UpdConstructCountN(eType_Bool, mSignalTotal);
    assert (mpSubIntfSignalPosValid);
  }

  unsigned found_count = 0;
  unsigned total_count = 0;

  for (MacroListIterateAll(mSignalList)) {
    Signal* signal = mSignalList.Get();
    assert(signal);

    // mSignalList is used for Signal access via attribute pointer.
    if (signal->BelongsToGroup(group_name)) {
      sub_intf->mSignalList.Add(signal);
      mpSubIntfSignalPosValid[total_count] = TRUE;
    }
    else
      mpSubIntfSignalPosValid[total_count] = FALSE;

    total_count++;
  }

  return sub_intf;
}

// This function is called when input signals belonging to
// this interface are updated to a new (different) value.
void Interface::SetInputsUpdated()
{
  mInputsUpdated = TRUE;
}

Interface& Interface::operator[](int signal_pos)
{
  mSignalPos = signal_pos;

  return *this;
}

Interface& Interface::operator[](const char* signal_name)
{
  mpSignalAttr = mpSignalsView->AttributeFind(signal_name);

  assert(mpSignalAttr);

  return *this;
}

// Use this to set a signal that is an output/inout/strap.
bool Interface::operator=(Bit& bit)
{
  if (mpSignalAttr) {
    // Access is by name in the attr.
    for (MacroListIterateAll(mSignalList)) {
      Signal* signal = mSignalList.Get();
      assert(signal);

      if (signal->NameIs(mpSignalAttr->Name())) {
        if (!signal->Update(bit)) assert(0);

        mpSignalAttr = 0; // clear it

        return TRUE;
      }
    }
  }
  else {
    assert (mSignalPos < mSignalTotal);

    if (IsSubInterface()) assert(mpSubIntfSignalPosValid[mSignalPos]);

    if (! ((mppSignals[mSignalPos])->Update(bit))) assert(0);

    mSignalPos = SHRT_MAX;

    return TRUE;
  }

  assert(0);
}

bool Interface::operator=(unsigned u)
{
  if (mpSignalAttr) {
    for (MacroListIterateAll(mSignalList)) {
      Signal* signal = mSignalList.Get();
      assert(signal);

      if (signal->NameIs(mpSignalAttr->Name())) {
        if (!signal->Update(u)) assert(0);

        mpSignalAttr = 0; // clear it

        return TRUE;
      }
    }
  }
  else {
    assert(mSignalPos < mSignalTotal);

    if (IsSubInterface()) assert(mpSubIntfSignalPosValid[mSignalPos]);

    if (!((mppSignals[mSignalPos])->Update(u))) assert(0);

    mSignalPos = SHRT_MAX;
  }

  return FALSE;
}

bool Interface::operator==(Bit& bit)
{
  if (mpSignalAttr) {
    for (MacroListIterateAll(mSignalList)) {
      Signal* signal = mSignalList.Get();
      assert(signal);

      if (signal->NameIs(mpSignalAttr->Name()))
        return *signal == bit;
    }
  }
  else {
    assert(mSignalPos < mSignalTotal);

    if (IsSubInterface()) assert(mpSubIntfSignalPosValid[mSignalPos]);

    return *mppSignals[mSignalPos] == bit;

    mSignalPos = SHRT_MAX;
  }

  return FALSE;
}

bool Interface::operator==(unsigned u)
{
  if (mpSignalAttr) {
    for (MacroListIterateAll(mSignalList)) {
      Signal* signal = mSignalList.Get();
      assert(signal);

      if (signal->NameIs(mpSignalAttr->Name()))
        return *signal == u;
    }
  }
  else {
    assert(mSignalPos < mSignalTotal);

    if (IsSubInterface()) assert(mpSubIntfSignalPosValid[mSignalPos]);

    return *mppSignals[mSignalPos] == u;

    mSignalPos = SHRT_MAX;
  }

  return FALSE;
}

// Use this to set a signal that is an input/inout.
bool Interface::operator=(Signal& signal)
{
  for (MacroListIterateAll(mSignalList)) {
    Signal* signal = mSignalList.Get();
    assert(signal);

    if (signal->NameIs(mpSignalAttr->Name())) {
      if (!signal->Update(*signal)) assert(0);

      mpSignalAttr = 0; // clear it

      return TRUE;
    }
  }

  return FALSE;
}

void Interface::Connect(Signal* signal1, Signal* signal2, bool& connect_error)
{
  MacroAssert2(signal1, signal2)

  Module* mod1 = signal1->mpInterface->mpOwningProcess->GetOwningModule();
  Module* mod2 = signal2->mpInterface->mpOwningProcess->GetOwningModule();

  eModuleRelation mod_relation;

  if      (mod1->IsChildModuleOf(mod2)) mod_relation = eModule1IsChild;
  else if (mod2->IsChildModuleOf(mod1)) mod_relation = eModule2IsChild;
  else                                  mod_relation = eInterModule;

  // First check for invalid connections:
  short propagate_sig = WhichSignalPropagates(signal1, signal2, mod_relation);

  assert (propagate_sig);
  
  if (propagate_sig==1 || propagate_sig==3) signal1->mPropagateSignal = TRUE;
  if (propagate_sig==2 || propagate_sig==3) signal2->mPropagateSignal = TRUE;

  assert (signal1->Connect(signal2));
}

bool Interface::HistoryDepth(short count)
{
  mSignalSaveCount = count;

  assert(mSignalSaveCount);

  return TRUE;
}

bool Interface::SetOwningProcess(Process* process)
{
  // We dont allow an existing owning process to be overriden
  // as this may catch some user setup errors.
  if (! mpOwningProcess) mpOwningProcess = process;
  else                   assert(0);

  return TRUE;
}

// Copy the value in each signal (input/output) to the interface table & commit.
short Interface::Commit()
{
  Record* old_rec    = 0;
  Record* commit_rec = 0;

  if (mSignalCommitCount < mSignalSaveCount) {
    bool allow_immediate_val_update;
    commit_rec = mpSignalsView->RecordNew(allow_immediate_val_update=TRUE);
    
    if (mSignalCommitCount > 0)
      old_rec = mpSignalsViewIter->RecordSearchLast();
  }
  else {
    if (mSignalCommitCount % mSignalSaveCount == 0) {
      old_rec = mpSignalsViewIter->RecordSearchLast();
      mpSignalsViewIter->RecordSearchFirst();
    }
    else {
      old_rec = mpSignalsViewIter->RecordCurrentGet();

      if (!mpSignalsViewIter->RecordSearchNext())
        mpSignalsViewIter->RecordSearchFirst();
    }

    commit_rec = mpSignalsViewIter->RecordCurrentGet();
  }
  assert(commit_rec);

  for (MacroListIterateAll(mSignalList)) {
    Signal* signal = mSignalList.Get();
    assert(signal);

    Attribute* attr = signal->AttributeGet();
    assert(attr);

    (*commit_rec)[attr] = signal->mBit;

    // If dump is enabled then we dump only signal outputs, inputs not necessary.
    if (gVcd->DumpIsOn() && signal->IsDrivingSignal()) {
      if (old_rec==0 || (*commit_rec)[attr]!=(*old_rec)[attr]) {
        gVcd->DumpValueChange(signal->mpVcdIdentifier, &signal->mBit);
      }
    }

    if (gDbg) printf("Dbg: %s->%s=", Name(), signal->Name());
    if (gDbg) signal->mBit.Print("%s\n");
  }

  if (mSignalCommitCount < mSignalSaveCount) {
    // TBD: Add feature to allow us to Add and Commit in a single step.
    mpSignalsView->RecordSearchLast();
    if (mpSignalsView->TranRecordAdd(commit_rec)) mNeedsCommit = FALSE;

    gDB->DBTransactionsCommitView(mpSignalsView);
    mpSignalsViewIter->RecordSearchLast();
  }

  mSignalCommitCount++;

  return 1; // committed one transaction
}

// Propagate new values (stored in mSignalList) of the interface outputs
// to their connected inputs.
void Interface::PropagateInterfaceSignals(bool& all_ok)
{
  Signal* signal;
  Signal* signal_input;
  bool    update_ok    = TRUE;

  for (MacroListIterateAll(mSignalList)) {
    signal = mSignalList.Get();
    assert(signal);

    if (signal->mPropagateSignal && signal->mIsModified) {
      signal->mLastModifiedAt = gScheduler->SimulationTimeGet();

      for (MacroListIterateAll(signal->mConnectedSignalsList)) {
        signal_input = signal->mConnectedSignalsList.Get();
        assert(signal_input);

      //if (gDbg) printf("Propagate %s to %s\n", signal->Name(), signal_input->Name());
        if (signal_input->Update(*signal)) {
          signal_input->ScheduleAnySensitiveProcesses();

          if (signal_input->mPropagateSignal)
            signal_input->PropagateSignalFrom(signal, all_ok);
        }
        else
          update_ok = FALSE;
      }
    }
  }

  all_ok = (update_ok);
}

Signal* Interface::SignalGet(const char* signal_name)
{
  for (MacroListIterateAll(mSignalList)) {
    Signal* signal = mSignalList.Get();
    assert(signal);

    if (signal->NameIs(signal_name))
      return signal;
  }

  return 0;
}

bool Interface::GetCommittedValue(Bit& bit)
{
  Record* rec = mpSignalsView->RecordSearchLast();

  if (rec) {
    if (mpSignalAttr) {
      rec->ValueCopyGet(mpSignalAttr, bit);

      mpSignalAttr = 0; // clear it

      return TRUE;
    }
    else {
      assert(mSignalPos < mSignalTotal);

      rec->ValueCopyGet(mSignalPos, bit);

      mSignalPos = SHRT_MAX;

      return TRUE;
    }
  }

  return FALSE;
}

// Returns which signal (1 or 2 or 3=both) should propagate its value,
// 0 indicates an error.
short Interface::WhichSignalPropagates(Signal* sig1, Signal* sig2, eModuleRelation mod_relation) const
{
  short propagate = 0;

  switch (mod_relation) {
    case eInterModule:
      if (sig1->IsDrivingSignal()   && sig2->IsReceivingSignal()) propagate=1; break;
      if (sig2->IsDrivingSignal()   && sig1->IsReceivingSignal()) propagate=2; break;
      if (sig1->IsDrivingSignal()   && sig2->IsDrivingSignal())   propagate=3; break;
    case eModule1IsChild:
      if (sig1->IsDrivingSignal()   && sig2->IsDrivingSignal())   propagate=1; break;
      if (sig2->IsReceivingSignal() && sig1->IsReceivingSignal()) propagate=2; break;
    case eModule2IsChild:
      if (sig2->IsDrivingSignal()   && sig1->IsDrivingSignal())   propagate=2; break;
      if (sig1->IsReceivingSignal() && sig2->IsReceivingSignal()) propagate=1; break;
  }

  // return which signal should have 'propagate' set, 0 means error.
  return propagate;
}

// End
@


1.4
log
@Finalized logic for scheduling process an async signal change.
@
text
@d2 1
a2 1
// $Revision: 1.3 $
d11 1
d390 1
a390 1
void Connect(Signal* signal1, Signal* signal2, bool& connect_error)
d394 8
a401 2
  eSignalType signal_type1 = signal1->SignalType();
  eSignalType signal_type2 = signal2->SignalType();
d404 8
a411 5
  if (!IsSignalConnectValid(signal_type1, signal_type2))
    connect_error = TRUE;
  else {
    assert (signal1->Connect(signal2));
  }
d498 1
a498 1
void Interface::PropagateOutputs(bool& all_ok)
d508 3
a510 3
    if (signal->mSignalType == eSignalType_Output
    ||  signal->mSignalType == eSignalType_InOut)
    {
d516 1
a516 3
        if (!signal_input->Update(*signal)) update_ok = FALSE;

        if (signal_input->mIsModified) {
d519 2
a520 1
          signal_input->mIsModified = FALSE;
d522 2
d570 17
a586 20
bool IsSignalConnectValid(eSignalType signal_type1, eSignalType signal_type2)
{
  bool valid = FALSE;

  if (signal_type2 == eSignalType_None
  ||  signal_type2 == eSignalType_Invalid)
  {
    valid = FALSE;
  }
  else {
    bool signal2_can_be_driven = (   signal_type2==eSignalType_Input
                                  || signal_type2==eSignalType_InOut);

    switch (signal_type1) {
    case eSignalType_Input:  { valid = signal_type2!=eSignalType_Input; break; }
    case eSignalType_Output: { valid = signal2_can_be_driven;           break; }
    case eSignalType_InOut:  { valid = TRUE;                            break; }
    case eSignalType_Strap:  { valid = signal2_can_be_driven;           break; }
    default:                 { valid = FALSE;                           break; }
    }
d589 2
a590 1
  return valid;
@


1.3
log
@1.  Added mpSignalsViewIter, mSignalPos, mSignalSaveCount, mSignalCommitCount,
    mNeedsCommit, mIsSynchronous, mInputsUpdated, mIntfModifier.
2.  Removed mpSignalClock.
3.  Added missing logic to prevent incorrect signal position in sub-interface.
4.  Updated functions to access signals by position (in addition to by name).
5.  Removed InputsReady().
6.  Added SetOwningProcess(Process*).
7.  Fixed logic in Commit().
8.  Allow dumping only output|inout signals, inputs can use same vcd identifier.
@
text
@d2 1
a2 1
// $Revision: 1.2 $
a241 8

  // CONT: Schedule the process for this interface:
  //   if (! mScheduledForCurrentSimTime) {
  //     // Note: A Sync process executes only once per timesptamp, that
  //     // needs to be checked by the Scheduler in the function below.
  //     gScheduler->ScheduleTheProcess(mpOwningProcess);
  //     mScheduledForCurrentSimTime = TRUE;
  //   }
d507 6
a512 2
        // CONT: Schedule any sensitive processes.
        signal_input->ScheduleAnySensitiveProcesses();
@


1.2
log
@1. Added memory tracking in constructors and destructors.
@
text
@d2 1
a2 1
// $Revision: 1.1 $
d8 1
a8 1

d23 2
a24 1
M_ExternConstrutDestructCountInt;
d36 6
a41 1
  mSignalHistoryDepth    (eSignalHistoryDepthDefault),
a42 2
  mDump                  (FALSE),
  mpSignalClock          (0),
d44 4
d50 3
a52 1
  mNeedsCommit           (FALSE)
d55 1
d67 3
d82 1
a82 1
    if (!strlen(desc[i].signal_name)) { done = TRUE; break; }
a84 1
    Value      v;
d92 1
a92 2
      // Leave 'type' unchanged.
      break;
d94 3
a96 3
      if (type == eSignalType_Input)  type = eSignalType_Output;
      if (type == eSignalType_Output) type = eSignalType_Input;
      // all others unchanged: _InOut, _Clock, _Strap, _None, _Invalid.
d100 1
d104 9
a112 1
    if (init_val) v = *init_val;
d114 4
a117 2
    if (init_val) attr = mpSignalsTable->AttributeAdd(name, eValueBit, &v,        width);
    else          attr = mpSignalsTable->AttributeAdd(name, eValueBit, (Value*)0, width);
d123 1
a123 1
    mSignalList.Add(signal);
d125 2
a126 2
    // For fast access to the clock signal we keep a separate extra handle.
    if (type == eSignalType_Clock) mpSignalClock = signal;
d128 11
a138 1
    assert(mSignalList.Size() != SHRT_MAX);
d145 2
a146 1
Interface::Interface(Interface* parent_intf) :
d148 6
a153 1
  mSignalHistoryDepth    (eSignalHistoryDepthDefault),
d156 5
a160 1
  mIntfUpdateMode        (eIntfUpdMode_InputsNone),
d162 3
a164 1
  mNeedsCommit           (FALSE)
d166 2
d173 1
a173 6
  for (MacroListIterateAll(mSignalList)) {
    Signal* signal = mSignalList.Get();
    assert(signal);

    delete signal; signal = 0;
  }
d177 4
d187 6
d197 1
a197 1
// processes a part of them and to make it easier to connect interfaces to-
d202 1
a202 1
Interface* Interface::SubInterfaceGet(const char* sub_intf_name)
d206 4
a209 3
  if (!IsSubInterface()) {
    sub_intf = new Interface(this);
    assert(sub_intf);
d211 11
a221 3
    for (MacroListIterateAll(mSignalList)) {
      Signal* signal = mSignalList.Get();
      assert(signal);
d223 4
a226 3
      if (signal->GroupNameIs(sub_intf_name)) {
        sub_intf->mSignalList.Add(signal);
      }
d228 4
d237 22
d271 5
a275 3
  for (MacroListIterateAll(mSignalList)) {
    Signal* signal = mSignalList.Get();
    assert(signal);
d277 2
a278 2
    if (signal->NameIs(mpSignalAttr->Name())) {
      if (!signal->Update(bit)) assert(0);
d280 1
a280 1
      mpSignalAttr = 0; // clear it
d282 2
a283 1
      return TRUE;
d286 6
d293 6
a298 1
  return FALSE;
d303 4
a306 3
  for (MacroListIterateAll(mSignalList)) {
    Signal* signal = mSignalList.Get();
    assert(signal);
d308 2
a309 2
    if (signal->NameIs(mpSignalAttr->Name())) {
      if (!signal->Update(u)) assert(0);
d311 1
a311 1
      mpSignalAttr = 0; // clear it
d313 2
a314 1
      return TRUE;
d317 9
d332 4
a335 3
  for (MacroListIterateAll(mSignalList)) {
    Signal* signal = mSignalList.Get();
    assert(signal);
d337 6
a342 2
    if (signal->NameIs(mpSignalAttr->Name())) {
      Bit signal_bit;
d344 1
a344 1
      GetCommittedValue(signal_bit);
d346 1
a346 1
      mpSignalAttr = 0; // clear it
d348 1
a348 3
      if (signal_bit == bit) return TRUE;
      else                   return FALSE;
    }
a350 2
  assert(0);

d356 4
a359 3
  for (MacroListIterateAll(mSignalList)) {
    Signal* signal = mSignalList.Get();
    assert(signal);
d361 6
a366 2
    if (signal->NameIs(mpSignalAttr->Name())) {
      Bit signal_bit;
d368 1
a368 1
      GetCommittedValue(signal_bit);
d370 1
a370 1
      mpSignalAttr = 0; // clear it
d372 1
a372 3
      if (signal_bit == u) return TRUE;
      else                 return FALSE;
    }
a374 2
  assert(0);

d404 5
a408 6
  if ((signal_type1==eSignalType_Output || signal_type1==eSignalType_InOut)
  &&  (signal_type2==eSignalType_Input  || signal_type2==eSignalType_InOut))
  {
    signal1->ConnectTo(signal2);

    return;
a409 11

  if ((signal_type1 == eSignalType_Input  || signal_type1 == eSignalType_InOut)
  ||  (signal_type2 == eSignalType_Output || signal_type2 == eSignalType_InOut))
  {
    signal2->ConnectTo(signal1);

    return;
  }

  // Otherwise set the connect_error.
  connect_error = TRUE;
d412 1
a412 148
// Connect the signals from two interfaces.
// If connect_mode is ByName:
//   All signals from intf1 group1 are connected to the same named signals in
//   intf2 group2.
//   If the group name is empty then that qualifier is removed and only the
//   signal name is matched.
// If connect_mode is ByPosition:
//   All signals from intf1 group1 are connected in order with the signals in
//   intf2 group2.
//   If the group name is empty then that qualifier is removed and signals are
//   immediately connected in order starting from the first signal.
//   Connection is stopped as soon as the group doesnt match or the empty signal
//   name is encountered for either interface.
// An error is reported if:
//   No signal are connected.
//   Bit width doesnt match for the connected pair of signals.
//   There are unconnected signals remaining for an interface.
bool Connect(Interface* intf1, const char* group1, Interface* intf2, const char* group2, eInterfaceConnectMode connect_mode)
{
  MacroAssert4(intf1, group1, intf2, group2);

  bool ignore_group1;
  bool ignore_group2;

  if (!strlen(group1)) ignore_group1 = TRUE;
  if (!strlen(group2)) ignore_group2 = TRUE;

  bool error = FALSE;

  switch (connect_mode) {
    case eInterfaceConnectMode_ByName:
    {
      for (int i=0; !error; i++) {
        const char* s1 = intf1->mpInterfaceDescription[i].signal_name;
        const char* g1 = intf1->mpInterfaceDescription[i].signal_group;

        if (!strlen(s1)) break; // no more names (signals) to connect

        if (!ignore_group1 && strcmp(g1, group1)) continue;

        bool found = FALSE;

        for (int j=0; !error; j++) {
          const char* s2 = intf2->mpInterfaceDescription[j].signal_name;
          const char* g2 = intf2->mpInterfaceDescription[i].signal_group;

          if (!strlen(s2)) {
            assert(0); // no matching name (signal) found
            break;
          }

          if (!ignore_group2 && strcmp(g2, group2)) continue;
          if (strcmp(s1, s2))                       continue;

          Connect(intf1->SignalGet(s1), intf2->SignalGet(s2), error);

          if (!error) found = TRUE;
          break;
        }

        error = !found;
      }
    }
    break;
    case eInterfaceConnectMode_ByPosition:
    {
      bool  g1_found = FALSE;
      bool  g2_found = FALSE;
      short group1_pos;
      short group2_pos;

      if (!ignore_group1) {
        // Set position to group1.
        for (int i=0; !g1_found && !error; i++) {
          const char* g1 = intf2->mpInterfaceDescription[i].signal_group;

          if (!strlen(g1)) { error = TRUE; break; }

          if (strcmp(g1, group1)) continue;

          g1_found=TRUE; group1_pos=i; break;
        }
      }

      if (!ignore_group2) {
        // Set position to group2.
        for (int i=0; !g2_found && !error; i++) {
          const char* g2 = intf2->mpInterfaceDescription[i].signal_group;

          if (!strlen(g2)) { error = TRUE; break; }

          if (strcmp(g2, group2)) continue;

          g2_found=TRUE; group2_pos=i; break;
        }
      }

      if (!g1_found || !g1_found) return error = TRUE;

      bool one_found = FALSE;

      for (int i=0; !error; i++) {
        const char* s1 = intf1->mpInterfaceDescription[group1_pos+i].signal_name;
        const char* g1 =
        intf1->mpInterfaceDescription[group1_pos+i].signal_group;

        const char* s2 = intf2->mpInterfaceDescription[group2_pos+i].signal_name;
        const char* g2 =
        intf2->mpInterfaceDescription[group2_pos+i].signal_group;

        if (!ignore_group1 && strcmp(g1, group1)) {
          if (!ignore_group2 && strcmp(g2, group2)) {
            break; // we are past the end of the group
          }
          else {
            error = TRUE; // g1 is past the end but g2 is not
            break;
          }
        }

        if (!strlen(s1)) {
          if (!ignore_group1) {
            // intf2 still has some signals
            if (!ignore_group2 && strlen(s2)) error = TRUE;
          }

          break;
        }

        if (!strlen(s2)) {
          if (!ignore_group2) error = TRUE; // intf2 ran out of signals to connect

          break;
        }

        Connect(intf1->SignalGet(s1), intf2->SignalGet(s2), error);

        if (!error) one_found = TRUE;
      }
       if (!error && !one_found) error = TRUE; // need to connect at least one
    }
    break;
  }

  return error==FALSE;
}

bool Interface::InputsReady()
d414 1
a414 1
  bool found_input = FALSE;
d416 1
a416 3
  for (MacroListIterateAll(mSignalList)) {
    Signal* signal = mSignalList.Get();
    assert(signal);
d418 1
a418 25
    if (signal->SignalType()==eSignalType_Strap
    &&  gScheduler->SimulationTimeGet()==0)
    {
      return TRUE;
      // Note: after time 0, strap value changes alone
      //       will not cause any process execution.
    }

    if (signal->SignalType() == eSignalType_InOut
    ||  signal->SignalType() == eSignalType_Input)
    {
      if (signal->IsUpdated()) {
        if (mIntfUpdateMode == eIntfUpdMode_InputsAny) return TRUE;
      }
      else {
        return FALSE;
      }

      found_input = TRUE;
    }
  }

  // If we reach here then either all signals were updated or there are no
  // inputs in this interface, 'found' ensures there was at least one input.
  return found_input;
d421 1
a421 1
bool Interface::HistoryDepth(short count)
d423 4
a426 1
  mSignalHistoryDepth = count;
d431 2
a432 1
eInterfaceType Interface::InterfaceType() const
d434 9
a442 2
  if (IsSubInterface()) {
    return mpParentInterface->InterfaceType();
d445 3
a447 3
    if (mpSignalClock) {
      if (mSignalList.Size() == 1) return eInterfaceType_Clock;
      else                         return eInterfaceType_Synchronous;
d449 2
a450 3
    else
      return eInterfaceType_Asynchronous;
  }
d452 3
a454 2
  return eInterfaceType_Invalid;
}
d456 1
a456 8
// Copy the value in each signal (input/output) to the interface table & commit.
short Interface::Commit()
{
  Record* old_rec = 0;

  if (mpSignalsView->Size() > 1) {
    old_rec = mpSignalsView->RecordSearchLast();
    assert(old_rec);
d458 1
a458 3

  Record* new_rec = mpSignalsView->RecordNew();
  assert(new_rec);
d467 1
a467 1
    (*new_rec)[attr] = signal->mBit;
d469 3
a471 2
    if (gVcd->DumpStateGet()==eDumpOn) {
      if (old_rec==0 || (*new_rec)[attr]!=(*old_rec)[attr]) {
d480 10
a489 2
  // TBD: Add feature to allow us to Add and Commit in a single step.
  if (mpSignalsView->TranRecordAdd(new_rec)) mNeedsCommit = FALSE;
d491 1
a491 1
  return gDB->DBTransactionsCommitView(mpSignalsView);
d494 2
a495 1
// Propagate interface outputs to their connected inputs.
d509 2
a510 2
      for (MacroListIterateAll(signal->mSignalConnectsToList)) {
        signal_input = signal->mSignalConnectsToList.Get();
d515 2
d529 2
a530 1
    if (signal->NameIs(signal_name)) {
a531 1
    }
a538 2
  Value val;

d542 2
a543 1
    assert(mpSignalAttr);
d545 6
a550 1
    rec->ValueCopyGet(mpSignalAttr, val);
d552 1
a552 1
    bit = (Bit)val;
d554 1
a554 1
    mpSignalAttr = 0; // clear it
d556 2
a557 1
    return TRUE;
d563 1
a563 1
void Interface::InputsProcessedDone()
d565 10
a574 3
  for (MacroListIterateAll(mSignalList)) {
    Signal* signal = mSignalList.Get();
    assert(signal);
d576 6
a581 5
    if (signal->SignalType() == eSignalType_InOut
    ||  signal->SignalType() == eSignalType_Input)
    {
      signal->mIsUpdated            = FALSE; // reset
      signal->mMultipleUpdatesCount = 0;     // reset
d584 2
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
// $RCSfile: Interface,v $
d10 1
d23 1
d107 2
d121 1
d140 2
@
