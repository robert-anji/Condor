head	1.5;
access;
symbols;
locks
	robert:1.5; strict;
comment	@// @;


1.5
date	2011.12.03.10.12.19;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2010.09.23.23.12.49;	author ranji;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.13.21.25.07;	author ranji;	state Exp;
branches;
next	1.2;

1.2
date	2009.08.02.02.15.15;	author ranji;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.19.01.38.40;	author ranji;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Added member mClockEdge to hold the current clock edge and a function
to return the values. Renamed mClockPhaseCurrent to mClockPhase.
@
text
@// $RCSfile: Clock.cc,v $
// $Revision: 1.4 $

#include <assert.h>

#include "Clock.h"
//
#include "Global.h"
#include "Interface.h"
#include "Process.h"
#include "Scheduler.h"
#include "SimulatorDefines.h"

extern Scheduler* gScheduler;
M_ExternConstructDestructCountInt;

Clock& Clock::operator()(unsigned u) {
  mHalfPeriod = u;
  return *this;
}

// Define a built-in Interface for the Clock.
const char* const cClockName  = "Clock";
//
enum { eSignalIntf, eSignalIntf_End };
//
InterfaceDescription Clock_Interface[] = {
  eSignalIntf,     cClockName, 1, eSignalType_Output,  "CLK",
  eSignalIntf_End, "",         0, eSignalType_Invalid, "",
};

Clock::Clock(const char* name, Module* parent_module, unsigned half_period, eTimeScale t, eClockPhase phase) :
  Process                   (name, parent_module),
  mHalfPeriod               (half_period),
  mTimeScale                (t),
  mClockPhaseStart          (phase),
  mClockPhase               (phase),
  mClockEdge                (eSignalEdge_Invalid),
  mClockStartTime           (0),
  mClockNextTransitionTime  (0),
  mClockScheduleSuspend     (FALSE),
  mBit                      (0, 0)
{
  mBit = 0;

  mpInterface = new Interface(name, Clock_Interface);
  assert(mpInterface);

  Signal* signal = mpInterface->SignalGet(cClockName);
  assert(signal);

  mpInterface->SetOwningProcess(this);

  M_UpdConstructCount(eType_Clock);
}

Clock::~Clock()
{
  M_UpdDestructCount(eType_Clock);
}

bool Clock::Start()
{
  mProcessState    = eProcessState_Running;
  mClockStartTime  = gScheduler->SimulationTimeGet();

  SimulationTime tm_next;

  switch (mClockPhase) {
  case eClockPhase_JustBeforePositiveEdge: mClockEdge=eSignalEdge_PositiveEdge; mBit=0; tm_next=0;           break;
  case eClockPhase_JustAfterPositiveEdge:  mClockEdge=eSignalEdge_NegativeEdge; mBit=1; tm_next=mHalfPeriod; break;
  case eClockPhase_JustBeforeNegativeEdge: mClockEdge=eSignalEdge_NegativeEdge; mBit=1; tm_next=0;           break;
  case eClockPhase_JustAfterNegativeEdge:  mClockEdge=eSignalEdge_PositiveEdge; mBit=0; tm_next=mHalfPeriod; break;
  default:                                 assert(0);
  }

  mClockNextTransitionTime = mClockStartTime + tm_next;
}

void Clock::ProcessExecute(ProcessExecuteReason& exec_reason)
{
  exec_reason.mExecutedOk = TRUE;

  if (mClockScheduleSuspend) {
    mProcessState = eProcessState_Suspended;

    return;
  }

  mBit = !mBit;

  Interface& clk_intf = *mpInterface;

//clk_intf[cClockName] = mBit;
  clk_intf[0] = mBit; // assumes only one signal for clocks

  if (mBit == 1) { mClockPhase = eClockPhase_JustAfterPositiveEdge; mClockEdge=eSignalEdge_PositiveEdge; }
  else           { mClockPhase = eClockPhase_JustAfterNegativeEdge; mClockEdge=eSignalEdge_NegativeEdge; }

  mClockNextTransitionTime += mHalfPeriod;
}

bool Clock::ProcessStateModify(eProcessState new_state)
{
  switch (new_state) {
  case eProcessState_Running:
    if (mProcessState == eProcessState_Suspended) {
      Start(); // restarts the clock and updates the process state
    }
    break;
  case eProcessState_Suspended:
    if (mProcessState == eProcessState_Running) {
      // Schedule the suspend for the next time the clock tries to execute
      // so that current sync processes still see the clock running.
      mClockScheduleSuspend = TRUE;
    }
    break;
  default:
    assert(0);
  }

  return TRUE;
}

eProcessType Clock::ProcessType() const
{
  return eProcessType_Clock;
}

SimulationTime Clock::SimTimeForNextClockEdgeGet(eSignalEdge next_clk_edge)
{
  SimulationTime curr_sim_tm = gScheduler->SimulationTimeGet();
  SimulationTime next_sim_tm = curr_sim_tm;

  if (curr_sim_tm==mClockStartTime && mClockPhase==mClockPhaseStart) {
    // If the clock has just started, then we must consider its starting phase.
    switch (mClockPhaseStart) {
      case eClockPhase_JustBeforePositiveEdge:
        switch (next_clk_edge) {
          case eSignalEdge_PositiveEdge:            next_sim_tm += 0            ; break;
          case eSignalEdge_PositiveLevel:           next_sim_tm += 0            ; break;
          case eSignalEdge_PositiveAndNegativeEdge: next_sim_tm += 0            ; break;
          case eSignalEdge_NegativeEdge:            next_sim_tm += mHalfPeriod  ; break;
          case eSignalEdge_NegativeLevel:           next_sim_tm += mHalfPeriod  ; break;
          default: assert(0);
        }
        break;
      case eClockPhase_JustAfterPositiveEdge:
        switch (next_clk_edge) {
          case eSignalEdge_PositiveEdge:            next_sim_tm += mHalfPeriod*2; break;
          case eSignalEdge_PositiveLevel:           next_sim_tm += 0            ; break;
          case eSignalEdge_PositiveAndNegativeEdge: next_sim_tm += mHalfPeriod  ; break;
          case eSignalEdge_NegativeEdge:            next_sim_tm += mHalfPeriod  ; break;
          case eSignalEdge_NegativeLevel:           next_sim_tm += mHalfPeriod  ; break;
          default: assert(0);
        }
        break;
      case eClockPhase_JustBeforeNegativeEdge:
        switch (next_clk_edge) {
          case eSignalEdge_PositiveEdge:            next_sim_tm += mHalfPeriod  ; break;
          case eSignalEdge_PositiveLevel:           next_sim_tm += mHalfPeriod  ; break;
          case eSignalEdge_PositiveAndNegativeEdge: next_sim_tm += 0            ; break;
          case eSignalEdge_NegativeEdge:            next_sim_tm += 0            ; break;
          case eSignalEdge_NegativeLevel:           next_sim_tm += 0            ; break;
          default: assert(0);
        }
        break;
      case eClockPhase_JustAfterNegativeEdge:
        switch (next_clk_edge) {
          case eSignalEdge_PositiveEdge:            next_sim_tm += mHalfPeriod  ; break;
          case eSignalEdge_PositiveLevel:           next_sim_tm += mHalfPeriod  ; break;
          case eSignalEdge_PositiveAndNegativeEdge: next_sim_tm += mHalfPeriod  ; break;
          case eSignalEdge_NegativeEdge:            next_sim_tm += mHalfPeriod*2; break;
          case eSignalEdge_NegativeLevel:           next_sim_tm += 0            ; break;
          default: assert(0);
        }
        break;
      default: assert(0);
    }
  }
  else {
    eSignalEdge prev_clk_edge;

    if (mBit == 1 ) prev_clk_edge = eSignalEdge_PositiveEdge;
    else            prev_clk_edge = eSignalEdge_NegativeEdge;

    switch (next_clk_edge) {
      case eSignalEdge_PositiveEdge:
      case eSignalEdge_PositiveLevel:
        if (prev_clk_edge == eSignalEdge_PositiveEdge)
          next_sim_tm = mClockNextTransitionTime + mHalfPeriod;
        else
          next_sim_tm = mClockNextTransitionTime;
        break;
      case eSignalEdge_NegativeEdge:
      case eSignalEdge_NegativeLevel:
        if (prev_clk_edge == eSignalEdge_PositiveEdge)
          next_sim_tm = mClockNextTransitionTime;
        else
          next_sim_tm = mClockNextTransitionTime + mHalfPeriod;
        break;
      case eSignalEdge_PositiveAndNegativeEdge:
        next_sim_tm = mClockNextTransitionTime;
        break;
      default: assert(0);
    }
  }

  return next_sim_tm;
}

// End
@


1.4
log
@ Split DefinesAndEnum.h into DBDefines.h, Global.h and SimulatorDefines.h .
@
text
@d2 1
a2 1
// $Revision: 1.3 $
d22 1
d24 1
d26 1
d37 2
a38 1
  mClockPhaseCurrent        (phase),
d44 1
a44 1
  mBit    = 0;
d67 1
a67 1
  SimulationTime tm_incr;
d69 6
a74 6
  switch (mClockPhaseCurrent) {
    case eClockPhase_JustBeforePositiveEdge: mBit = 0; tm_incr = 0;           break;
    case eClockPhase_JustAfterPositiveEdge:  mBit = 1; tm_incr = mHalfPeriod; break;
    case eClockPhase_JustBeforeNegativeEdge: mBit = 1; tm_incr = 0;           break;
    case eClockPhase_JustAfterNegativeEdge:  mBit = 0; tm_incr = mHalfPeriod; break;
    default:                                 assert(0);
d77 1
a77 1
  mClockNextTransitionTime = mClockStartTime + tm_incr;
d97 2
a98 2
  if (mBit == 1) mClockPhaseCurrent = eClockPhase_JustAfterPositiveEdge;
  else           mClockPhaseCurrent = eClockPhase_JustAfterNegativeEdge;
d135 1
a135 1
  if (curr_sim_tm==mClockStartTime && mClockPhaseCurrent==mClockPhaseStart) {
@


1.3
log
@2. Added an Interface for Clock.
3. Moved 'starting phase' from Start() to Clock constructor.
4. Removed 'initial delay' for clock start, can be achieved by other means.
5. Clock now uses ProcessState instead of its own variables (like IsRunning).
6. Constructor no longer adds schedules Clock, now done in ElaborateModule(top).
7. Renamed eClockEdge to eSignalEdge.
8. Add mClockNextTransitionTime to ProcessExecute(), updated every half-period.
9. Modified SimTimeForNextClockEdgeGet() to use mClockNextTransitionTime.
@
text
@d2 1
a2 1
// $Revision: 1.2 $
a7 1
#include "DefinesAndEnum.h"
d12 1
@


1.2
log
@1. Added memory tracking in constructors and destructors.
@
text
@d2 1
a2 1
// $Revision: 1.1 $
d7 1
a7 1

d10 2
d15 29
a43 1
M_ExternConstrutDestructCountInt;
d45 4
a48 12
Clock::Clock(const char* name, unsigned half_period, eTimeUnit t, Module* module) :
  Process               (name, module),
  mHalfPeriod           (half_period),
  mTimeUnit             (t),
  mClockPhaseStart      (eClockPhase_Invalid),
  mClockPhaseCurrent    (eClockPhase_Invalid),
  mClockStartTime       (0),
  mClockNextActiveTime  (0),
  mClockIsRunning       (FALSE),
  mBit                  (0, 0)
{
  mBit = 0;
d58 1
a58 1
bool Clock::Start(eClockPhase clk_phase, SimulationTime initial_delay)
d60 10
a69 15
  mClockIsRunning    = TRUE;
  mClockPhaseStart   = clk_phase;
  mClockPhaseCurrent = mClockPhaseStart;
  mClockStartTime    = gScheduler->SimulationTimeGet() + initial_delay;

  // Now compute: mClockNextActiveTime.

  SimulationTime tm_offset1 = initial_delay + mClockStartTime;
  SimulationTime tm_offset2 = initial_delay + mClockStartTime + mHalfPeriod;

  switch (mClockPhaseStart) {
    case eClockPhase_JustBeforePositiveEdge: mBit = 0; mClockStartTime += 0;           break;
    case eClockPhase_JustAfterPositiveEdge:  mBit = 1; mClockStartTime += mHalfPeriod; break;
    case eClockPhase_JustBeforeNegativeEdge: mBit = 1; mClockStartTime += 0;           break;
    case eClockPhase_JustAfterNegativeEdge:  mBit = 0; mClockStartTime += mHalfPeriod; break;
d73 1
a73 3
  mClockNextActiveTime = mClockStartTime;

  return gScheduler->ProcessAddClock(this);
d76 1
a76 1
void Clock::Execute(bool& all_ok, Interface* intf)
d78 8
d88 5
d95 2
d99 1
a99 1
void Clock::NextActiveTime()
d101 18
a118 2
  if (mProcessState == eProcessState_Active)
    mClockNextActiveTime += mHalfPeriod;
d126 1
a126 1
SimulationTime Clock::GetSimTimeForNextClockEdge(eClockEdge next_clk_edge)
d136 5
a140 5
          case eClockEdge_PositiveEdge:            next_sim_tm += 0            ; break;
          case eClockEdge_PositiveLevel:           next_sim_tm += 0            ; break;
          case eClockEdge_PositiveAndNegativeEdge: next_sim_tm += 0            ; break;
          case eClockEdge_NegativeEdge:            next_sim_tm += mHalfPeriod  ; break;
          case eClockEdge_NegativeLevel:           next_sim_tm += mHalfPeriod  ; break;
d146 5
a150 5
          case eClockEdge_PositiveEdge:            next_sim_tm += mHalfPeriod*2; break;
          case eClockEdge_PositiveLevel:           next_sim_tm += 0            ; break;
          case eClockEdge_PositiveAndNegativeEdge: next_sim_tm += mHalfPeriod  ; break;
          case eClockEdge_NegativeEdge:            next_sim_tm += mHalfPeriod  ; break;
          case eClockEdge_NegativeLevel:           next_sim_tm += mHalfPeriod  ; break;
d156 5
a160 5
          case eClockEdge_PositiveEdge:            next_sim_tm += mHalfPeriod  ; break;
          case eClockEdge_PositiveLevel:           next_sim_tm += mHalfPeriod  ; break;
          case eClockEdge_PositiveAndNegativeEdge: next_sim_tm += 0            ; break;
          case eClockEdge_NegativeEdge:            next_sim_tm += 0            ; break;
          case eClockEdge_NegativeLevel:           next_sim_tm += 0            ; break;
d166 5
a170 5
          case eClockEdge_PositiveEdge:            next_sim_tm += mHalfPeriod  ; break;
          case eClockEdge_PositiveLevel:           next_sim_tm += mHalfPeriod  ; break;
          case eClockEdge_PositiveAndNegativeEdge: next_sim_tm += mHalfPeriod  ; break;
          case eClockEdge_NegativeEdge:            next_sim_tm += mHalfPeriod*2; break;
          case eClockEdge_NegativeLevel:           next_sim_tm += 0            ; break;
d178 1
a178 1
    eClockEdge current_clk_edge;
d180 2
a181 2
    if (mBit == 1 ) current_clk_edge = eClockEdge_PositiveLevel;
    else            current_clk_edge = eClockEdge_NegativeLevel;
d184 13
a196 9
      case eClockEdge_PositiveEdge:
      case eClockEdge_PositiveLevel:
        if (current_clk_edge == eClockEdge_PositiveEdge) next_sim_tm += mHalfPeriod*2;
        else                                             next_sim_tm += mHalfPeriod;
        break;
      case eClockEdge_NegativeEdge:
      case eClockEdge_NegativeLevel:
        if (current_clk_edge == eClockEdge_PositiveEdge) next_sim_tm += mHalfPeriod;
        else                                             next_sim_tm += mHalfPeriod*2;
d198 2
a199 2
      case eClockEdge_PositiveAndNegativeEdge:
        next_sim_tm += mHalfPeriod;
@


1.1
log
@Initial revision
@
text
@d9 1
d13 1
d27 2
d33 1
@
