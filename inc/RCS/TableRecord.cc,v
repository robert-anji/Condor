head	1.5;
access;
symbols;
locks; strict;
comment	@// @;


1.5
date	2010.09.25.00.00.26;	author ranji;	state Exp;
branches;
next	1.4;

1.4
date	2010.09.23.23.12.49;	author ranji;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.22.00.05.39;	author ranji;	state Exp;
branches;
next	1.2;

1.2
date	2009.08.02.02.15.15;	author ranji;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.19.01.43.41;	author ranji;	state Exp;
branches;
next	;


desc
@@


1.5
log
@1. Correct way to initialize the reference count is in the constructor.
@
text
@// $RCSfile: TableRecord.cc,v $
// $Revision: 1.4 $

#include <stdio.h>
#include <string.h>
#include <assert.h>

#include "TableRecord.h"
//
#include "DBDefines.h"
#include "Global.h"

static bool gDbg = FALSE;

M_ExternConstructDestructCountInt;

TableRecord::TableRecord(short total_attr) :
  mpValues             (0),
  mReferenceCount      (1)
{
  if (total_attr)
    mpValues = new Value [total_attr]; M_ConstructedN(Value, total_attr);

  M_UpdConstructCount(eType_TableRecord);
}

TableRecord::TableRecord(const TableRecord &rec, short total_attr) :
  mpValues             (0),
  mReferenceCount      (1)
{
  if (total_attr) {
    mpValues = new Value [total_attr]; M_ConstructedN(Value, total_attr);

    for (short i=0; i<total_attr; i++) {
      mpValues[i] = rec.mpValues[i];
    }
  }

  M_UpdConstructCount(eType_TableRecord);
}

TableRecord::~TableRecord()
{
  if (mpValues) {
    delete [] mpValues; mpValues = 0;
  }

  M_UpdDestructCount(eType_TableRecord);
}

void TableRecord::ValueTypeSet(short i, eValueType type)
{
  mpValues[i].ValueTypeSet(type);
}

short TableRecord::ReferenceCountGet() const
{
  return mReferenceCount;
}

short TableRecord::ReferenceCountIncrement()
{
  if (mReferenceCount != SHRT_MAX) mReferenceCount++;
  else                             assert(0);

  return mReferenceCount;
}

short TableRecord::ReferenceCountDecrement()
{
  if (mReferenceCount != 0) mReferenceCount--;
  else                      assert(0);

  return mReferenceCount;
}

// End
@


1.4
log
@ Split DefinesAndEnum.h into DBDefines.h, Global.h and SimulatorDefines.h .
@
text
@d2 1
a2 1
// $Revision: 1.3 $
d19 1
a19 1
  mReferenceCount      (0)
d29 1
a29 1
  mReferenceCount      (0)
@


1.3
log
@1. Added memory tracking using macro M_UpdConstructCount, M_UpdDestructCount.
@
text
@d2 1
a2 1
// $Revision: 1.2 $
d10 1
a11 1
#include "DefinesAndEnum.h"
@


1.2
log
@1. Added memory tracking in constructors and destructors.
@
text
@d2 1
a2 1
// $Revision: 1.1 $
d9 1
a9 1

d11 1
d14 2
a15 1
M_ExternConstrutDestructCountInt;
d21 2
a22 1
  if (total_attr) mpValues = new Value [total_attr];
d32 1
a32 1
    mpValues = new Value [total_attr];
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
// $Revision: $
d10 2
d13 1
d20 2
d35 2
d44 2
@
