head	1.5;
access;
symbols;
locks
	robert:1.5; strict;
comment	@// @;


1.5
date	2011.12.07.07.02.05;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2011.08.16.02.52.12;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.14.21.52.41;	author ranji;	state Exp;
branches;
next	1.2;

1.2
date	2009.08.02.02.15.15;	author ranji;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.19.01.38.40;	author ranji;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Replaced the Put() and Get() functions with SchedulePut() and ScheduleGet() as
Mailbox needs to defer which process can do Put or Get to the Scheduler so that
fairness (in future: priority based) can be correctly implemented and
accomplished. The Mailbox implementation became greatly simplified as it lets
the Scheduler do all the hard work.
@
text
@// $RCSfile: Mailbox.cc,v $
// $Revision: 1.4 $

#include <assert.h>

#include "Mailbox.h"
//
#include "Global.h"
#include "Scheduler.h"
 
extern Scheduler* gScheduler;
//
M_ExternConstructDestructCountInt;

static unsigned sMailboxCount = 0;

template <class T>
Mailbox<T>::Mailbox() :
  mMailboxId    (++sMailboxCount),
  mEntriesMax   (10)
{
  assert(mEntriesMax <= D_MailboxEntriesMax);

  gScheduler->MailboxAdd((MailboxBase*)this);

  M_UpdConstructCount(eType_Mailbox);
}

template <class T>
Mailbox<T>::~Mailbox()
{
  M_UpdDestructCount(eType_Mailbox);
}

template <class T>
bool Mailbox<T>::SchedulePut(T* t, Process* process)
{
  mProcessWaitingOnPutList.Add(process);
  mMboxElmWaitingOnPutList.Add((void*)t);
}

template <class T>
void Mailbox<T>::ScheduleGet(Process* process)
{
  mProcessWaitingOnGetList.Add(process);
}

// End
@


1.4
log
@1. Added CONT statement needed to modify Put(), Get() to queue up requests.
@
text
@d2 1
a2 1
// $Revision: 1.3 $
d9 1
d15 2
d18 3
a20 8
Mailbox<T>::Mailbox(unsigned max_entries) :
  mEntriesMax               (max_entries),
  mEntryPutCommitted        (0),
  mEntryGetCommitted        (0),
  mEntryPutUncommitted      (0),
  mpProcessesBlockedForGet  (0),
  mpProcessesBlockedForPut  (0),
  mpEntries                 (0)
d24 1
a24 1
  if (mEntriesMax) mpEntries = new T (mEntriesMax);
a31 8
  delete [] mpEntries; mpEntries = 0;

  mEntryPutCommitted        = 0;
  mEntryGetCommitted        = 0;
  mEntryPutUncommitted      = 0;
  mpProcessesBlockedForGet  = 0;
  mpProcessesBlockedForPut  = 0;

a34 70
// CONT: Need to always block on Put() and Get() so that Scheduler
//       can apply a fair (or other) algorithm for the requestors.

template <class T>
bool Mailbox<T>::Put(T* elem)
{
  // Functionality:
  // Put() returns false if there are already mEntriesMax (comitted or not).
  // Put() should unblock a previously blocked Get().
  // Put() shouldnt unblock between Synchronous processes at the same timestamp.
  // Scheduler will commit uncommitted entries (put, get) when it advances time.
  // Otherwise, simply add the 'elem' into the fifo.

  // Commit any Puts() made before the current time.
  MailboxCommit();

  if (!EntriesAvailableForPut()) return FALSE;

  if (proc->ProcessType() == eProcessType_Synchronous) {
    // A Put() from a Synchronous process will be committed later by the
    // Scheduler when it advances the clock by invoking MailboxCommit().
    mEntryPutUncommitted++;
    mpEntries[mEntryPutUncommitted%mEntriesMax] = elem;

    mEntryPutUncommittedTime = gScheduler->SimulationTimeGet();
  }
  else {
    mEntryPutCommitted++;
    mpEntries[mEntryPutCommitted%mEntriesMax] = elem;
  }

  if (mProcessBlockedOnGet) {
    gScheduler->ProcessUnblock(mProcessBlockedOnGet);
    mProcessBlockedOnGet = 0;
  }

  assert (mEntryPutCommitted != UINT_MAX); // havent coded for rollover

  return TRUE;
}

template <class T>
T* Mailbox<T>::Get()
{
  // Functionality:
  // Get() returns false if there are no 'committed' entries.
  // Get() should unblock a previously blocked Put().
  // Get() shouldnt unblock between Synchronous processes at the same timestamp.
  // Scheduler will commit all entries (put, get) whenever it advances time.
  // Otherwise, simply return the oldest 'elem' from the fifo.

  // Commit any Puts() made before the current time.
  MailboxCommit();

  if (!EntriesAvailableForGet()) return FALSE;

  T* elem = mpEntries[mEntryGetCommitted%mEntriesMax];

  mEntryGetCommitted++;

  if (mProcessBlockedOnPut) {
    gScheduler->ProcessUnblock(mProcessBlockedOnPut);
    mProcessBlockedOnPut = 0;
  }

  assert (mEntryGetCommitted != UINT_MAX); // havent coded for rollover

  return elem;
}

d36 1
a36 1
bool Mailbox<T>::Put(T* elem, Process* process)
d38 2
a39 44
  // Functionality:
  // Put() should block if there are already mEntriesMax (comitted+uncommitted).
  // Put() should unblock a previously blocked Get().
  // Put() shouldnt unblock between Synchronous processes at the same timestamp.
  // Scheduler will commit all entries (put, get) whenever it advances time.
  // Otherwise, simply add the 'elem' into the fifo.

  // Commit any Puts() made before the current time.
  MailboxCommit();

  if (!EntriesAvailableForPut()) {
    mProcessBlockedOnPut = process;
    gScheduler->ProcessBlock(process);
    return FALSE;
  }

  if (process->ProcessType() == eProcessType_Synchronous) {
    // A Put() from a Synchronous process will be committed later by the
    // Scheduler when it advances the clock by invoking MailboxCommit().
    assert (mEntryPutUncommitted != UINT_MAX); // as we havent coded for rollover

    mEntryPutUncommitted++;

    mpEntries[mEntryPutUncommitted%mEntriesMax] = elem;

    // Inform Scheduler that this Mailbox will need a commit
    // The 'if==1' check is because we want only one commit for multiple Put's.
    if (mEntryPutUncommitted - mEntryPutCommitted == 1)
      mEntryPutUncommittedTime = gScheduler->SimulationTimeGet();
  }
  else {
    assert (mEntryPutCommitted != UINT_MAX); // havent coded for rollover

    mEntryPutCommitted++;

    mpEntries[mEntryPutCommitted%mEntriesMax] = elem;
  }

  if (mProcessBlockedOnGet) {
    gScheduler->ProcessUnblock(mProcessBlockedOnGet);
    mProcessBlockedOnGet = 0;
  }

  return TRUE;
d43 1
a43 1
T* Mailbox<T>::Get(Process* process)
d45 1
a45 42
  // Functionality:
  // Get() should block if there are no 'committed' entries.
  // Get() should unblock a previously blocked Put().
  // Get() shouldnt unblock between Synchronous processes at the same timestamp.
  // Scheduler will commit all entries (put, get) whenever it advances time.
  // Otherwise, simply return the oldest 'elem' from the fifo.

  // Commit any Puts() made before the current time.
  MailboxCommit();

  T* elem = 0;

  if (!EntriesAvailableForGet()) {
    gScheduler->ProcessBlock(process);
  }
  else {
    elem = mpEntries[mEntryGetCommitted%mEntriesMax];

    mEntryGetCommitted++;

    if (mProcessBlockedOnPut) {
      gScheduler->ProcessUnblock(mProcessBlockedOnPut);
      mProcessBlockedOnPut = 0;
    }

    assert (mEntryGetCommitted != UINT_MAX); // havent coded for rollover
  }

  return elem;
}

// Commit any Puts() that have been made before the current timestamp.
template <class T>
bool Mailbox<T>::MailboxCommit()
{
  if (gScheduler->SimulationTimeGet() > mEntryPutUncommittedTime) {
    mEntryPutCommitted = mEntryPutUncommitted;

    mEntryPutUncommittedTime = 0; // therefore 0 => all puts are committed
  }

  return TRUE;
@


1.3
log
@1. Added 'extern Scheduler'.
2. Added macros to track constructor & destructor calls (catch memory leaks).
3. Put() and Get() needed to call MailboxCommit(), added.
@
text
@d2 1
a2 1
// $Revision: 1.2 $
d45 3
@


1.2
log
@1. Added memory tracking in constructors and destructors.
@
text
@d2 1
a2 1
// $Revision: 1.1 $
d7 1
a7 1

d9 4
a12 2

M_ExternConstrutDestructCountInt;
d16 1
a16 1
  mEntriesMax               (max_size),
d55 3
d65 2
d93 3
d122 3
d134 1
a134 1
    assert (mEntryPutUncommitted != UINT_MAX); // havent coded for rollover
d141 1
a141 1
    // The 'if' check is because we need only one commit for multiple Put's.
d143 1
a143 1
      gScheduler->ScheduleMailboxCommit(this);
d171 3
d195 1
d199 5
a203 1
  mEntryPutCommitted = mEntryPutUncommitted;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
// $RCSfile: template.txt,v $
d8 4
d25 2
d39 2
@
