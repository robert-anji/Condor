head	1.6;
access
	Roberto;
symbols
	C1_80:1.2
	C1_70:1.1
	C1_00:1.1;
locks; strict;
comment	@// @;


1.6
date	2011.12.20.17.24.16;	author robert;	state Exp;
branches;
next	1.5;

1.5
date	2011.09.19.16.24.52;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2011.08.21.22.53.35;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.13.21.57.18;	author ranji;	state Exp;
branches;
next	1.2;

1.2
date	2007.07.14.14.31.35;	author ranji;	state Exp;
branches;
next	1.1;

1.1
date	2007.01.21.02.03.21;	author Roberto;	state Exp;
branches;
next	;


desc
@Initial Version.
@


1.6
log
@Added == and != comparison of Attribute with Record pointer.
@
text
@// $RCSfile: Attribute.cc,v $
// $Revision: 1.5 $

#include <stdio.h>
#include <string.h>
#include <assert.h>

#include "Attribute.h"
//
#include "Condition.h"
#include "Database.h"
#include "Enum.h"
#include "Value.h"

M_ExternConstructDestructCountInt;

Attribute::Attribute() :
  mValueType(eValueUnknown),
  mBitWidth(0),
  mPosition(0),
  mpAttrNullValue(0),
  mpTable(0),
  mpView(0)
{
  M_UpdConstructCount(eType_Attribute);
}

Attribute::Attribute(const char* nm) :
  mName(nm),
  mValueType(eValueUnsigned),//TBD: make unknown?
  mBitWidth(0),
  mPosition(0),
  mpAttrNullValue(0),
  mpTable(0),
  mpView(0)
{
  M_UpdConstructCount(eType_Attribute);
}

Attribute::Attribute(const char* nm, eValueType typ, Value *null_val, short bit_width) :
  mName(nm),
  mValueType(typ),
  mBitWidth(bit_width),
  mPosition(0),
  mpAttrNullValue(0),
  mpTable(0),
  mpView(0)
{
  if (mValueType == eValueBit) assert(mBitWidth);

  if (null_val) {
    mpAttrNullValue = new Value(*null_val); M_Constructed(Value);
    assert(mpAttrNullValue);
  }

  M_UpdConstructCount(eType_Attribute);
}

Attribute::Attribute(char* nm) :
  mName(nm),
  mValueType(eValueUnsigned),//TBD: Make unknown?
  mBitWidth(0),
  mPosition(0),
  mpAttrNullValue(0),
  mpTable(0),
  mpView(0)
{
  assert(mValueType!=eValueBit); // bit needs separate constructor

  M_UpdConstructCount(eType_Attribute);
}

Attribute::Attribute(char* nm, eValueType typ) :
  mName(nm),
  mValueType(typ),
  mBitWidth(0),
  mPosition(0),
  mpAttrNullValue(0),
  mpTable(0),
  mpView(0)
{
  assert(mValueType != eValueBit); // Bit needs separate constructor

  M_UpdConstructCount(eType_Attribute);
}

Attribute::Attribute(Attribute& attr)
{
  mValueType  = attr.mValueType;
  mName       = attr.mName;
  mPosition   = attr.mPosition;
  mBitWidth   = attr.mBitWidth;
  mpTable     = attr.mpTable;

  *mpAttrNullValue = *(attr.mpAttrNullValue);

  M_UpdConstructCount(eType_Attribute);
}

Attribute::~Attribute()
{
  if (mpAttrNullValue) { delete mpAttrNullValue; mpAttrNullValue=0; }

  M_UpdDestructCount(eType_Attribute);
}

Condition& Attribute::operator<(unsigned val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c < val;
}

Condition& Attribute::operator>(unsigned val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c > val;
}

Condition& Attribute::operator>=(unsigned val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c >= val;
}

Condition& Attribute::operator<=(unsigned val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c <= val;
}

Condition& Attribute::operator==(unsigned val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c == val;
}

Condition& Attribute::operator!=(unsigned val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c != val;
}

Condition& Attribute::operator<(int val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c < val;
}

Condition& Attribute::operator>(int val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c > val;
}

Condition& Attribute::operator>=(int val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c >= val;
}

Condition& Attribute::operator<=(int val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c <= val;
}

Condition& Attribute::operator==(int val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c == val;
}

Condition& Attribute::operator!=(int val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c != val;
}

Condition& Attribute::operator<(short val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c < val;
}

Condition& Attribute::operator>(short val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c > val;
}

Condition& Attribute::operator>=(short val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c >= val;
}

Condition& Attribute::operator<=(short val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c <= val;
}

Condition& Attribute::operator==(short val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c == val;
}

Condition& Attribute::operator!=(short val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c != val;
}

Condition& Attribute::operator<(char* val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c <  val;
}

Condition& Attribute::operator>(char* val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c >  val;
}

Condition& Attribute::operator>=(char* val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c >= val;
}

Condition& Attribute::operator<=(char* val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c <= val;
}

Condition& Attribute::operator==(char* val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c == val;
}

Condition& Attribute::operator!=(char* val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c != val;
}

Condition& Attribute::operator<(const char* val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c <  val;
}

Condition& Attribute::operator>(const char* val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c >  val;
}

Condition& Attribute::operator>=(const char* val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c >= val;
}

Condition& Attribute::operator<=(const char* val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c <= val;
}

Condition& Attribute::operator==(const char* val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c == val;
}

Condition& Attribute::operator!=(const char* val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c != val;
}

Condition& Attribute::operator==(void* val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c == val;
}

Condition& Attribute::operator!=(void* val) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c != val;
}

Condition& Attribute::operator!() const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return !(*c);
}

Condition& Attribute::operator==(Record* rec) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c == rec;
}

Condition& Attribute::operator!=(Record* rec) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c != rec;
}

Condition& Attribute::operator<(Attribute attr) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c < attr;
}

Condition& Attribute::operator>(Attribute attr) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c > attr;
}

Condition& Attribute::operator>=(Attribute attr) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c >= attr;
}

Condition& Attribute::operator<=(Attribute attr) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c <= attr;
}

Condition& Attribute::operator==(Attribute attr) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c == attr;
}

Condition& Attribute::operator!=(Attribute attr) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c != attr;
}

// Allow value pointers as RHS operands.
Condition& Attribute::operator<(Value* pval) const
{
  Condition* c = new Condition(this, TRUE);
  assert(c);

  return *c < pval;
}

const char* AttributeTypeToStr(eValueType type)
{
  switch (type) {
    case eValueUnknown:             return "Unknown";
    case eValueBit:                 return "Bit";
    case eValueChar:                return "Char";
    case eValueCharPtr:             return "CharPtr";
    case eValueConstCharConstPtr:   return "ConstCharPtr";
    case eValueVoidPtr:             return "VoidPtr";
    case eValueString:              return "String";
    case eValueUnsigned:            return "Unsigned";
    case eValueInt:                 return "Int";
    default:                        return "???";
  }
}

eValueType AttributeStrToType(const char* type_str)
{
  if (!strcmp(type_str, "Bit"         )) return eValueBit;
  if (!strcmp(type_str, "Char"        )) return eValueChar;
  if (!strcmp(type_str, "CharPtr"     )) return eValueCharPtr;
  if (!strcmp(type_str, "ConstCharPtr")) return eValueConstCharConstPtr;
  if (!strcmp(type_str, "VoidPtr"     )) return eValueVoidPtr;
  if (!strcmp(type_str, "String"      )) return eValueString;
  if (!strcmp(type_str, "Unsigned"    )) return eValueUnsigned;
  if (!strcmp(type_str, "Int"         )) return eValueInt;

  return eValueUnknown;
}

bool Attribute::operator>>(FILE* fp)
{
  if (fp==0) return FALSE;

  fprintf(fp, "%s,%s", (const char*)mName, Enum2Str(ValueTypeNV, mValueType));

  return TRUE;
}

bool Attribute::operator<<(FILE* fp)
{
  char typestr[256];
  char namestr[256];

  int ret = fscanf(fp, "%255[^,\n],%255[^;\n]", namestr, typestr);

  if (ret != 2)
  {
    fscanf(fp, "%*c");  // grab \n
    return FALSE;
  }

  typestr[255] = '\0';
  namestr[255] = '\0';

  mName = namestr;

  mValueType = (eValueType)Str2Enum(ValueTypeNV, typestr);

  return TRUE;
}

bool Attribute::AttributeIsSame(Attribute* attr)
{
  return (   mName           == attr->mName
          && mValueType      == attr->mValueType
          && mBitWidth       == attr->mBitWidth
          && mPosition       == attr->mPosition
          && mpAttrNullValue == attr->mpAttrNullValue
          && mpTable         == attr->mpTable);
}

// End
@


1.5
log
@1. Initialize mpView(0) in all constructors.
@
text
@d2 1
a2 1
// $Revision: 1.4 $
d371 16
@


1.4
log
@1. Added comparison operators of Attribute with Attribute to return
   Condition objects, needed for Joins.
2. Added comparison operator with Value pointer to return Condition.
@
text
@d2 1
a2 1
// $Revision: 1.3 $
d22 2
a23 1
  mpTable(0)
d34 2
a35 1
  mpTable(0)
d46 2
a47 1
  mpTable(0)
d65 2
a66 1
  mpTable(0)
d79 2
a80 1
  mpTable(0)
@


1.3
log
@1. Added memory tracking using macro M_UpdConstructCount, M_UpdDestructCount.
2. Initialize member mpTable to 0 in constructor.
3. Rename mAttrNullValue with mpAttrNullValue.
4. Added comparison operators for unsigned, short, char*, const char* and void.
5. Added missing initialization of member mBitWidth.
@
text
@d2 1
a2 1
// $Revision: 1.2 $
d366 57
@


1.2
log
@1. Added optional 'null' value for attribute.
2. Each attribute now stores its position in the Record.
3. Added the 'm' prefix to data members.
@
text
@d2 1
a2 1
// $Revision: 1.1 $
d10 1
d15 2
a17 1
  mName(0),
d19 1
d21 2
a22 1
  mAttrNullValue(0)
d24 1
d28 3
a30 2
  mName(0),
  mValueType(eValueUnsigned),
d32 2
a33 1
  mAttrNullValue(0)
d35 1
a35 3
  mName = new char [strlen(nm) + 1];

  strcpy(mName, nm);
d38 2
a39 2
Attribute::Attribute(const char* nm, eValueType typ, Value *null_val) :
  mName(0),
d41 1
d43 2
a44 1
  mAttrNullValue(0)
d46 1
a46 3
  mName = new char [strlen(nm) + 1];

  strcpy(mName, nm);
d49 2
a50 2
    mAttrNullValue = new Value(*null_val);
    assert(mAttrNullValue);
d52 2
d57 3
a59 2
  mName(0),
  mValueType(eValueUnsigned),
d61 2
a62 1
  mAttrNullValue(0)
d64 3
a66 2
  mName = new char[strlen(nm)+1];
  strcpy(mName, nm);
d70 1
a70 1
  mName(0),
d72 1
d74 2
a75 1
  mAttrNullValue(0)
d77 3
a79 2
  mName = new char[strlen(nm)+1];
  strcpy(mName, nm);
d84 7
a90 3
  mValueType = attr.mValueType;
  mName = new char[strlen(attr.mName)+1];
  strcpy(mName, attr.mName);
d92 1
a92 2
  mPosition = attr.mPosition;
  *mAttrNullValue = *(attr.mAttrNullValue);
d97 267
a363 2
  if (mName)          { delete [] mName; mName = 0;              }
  if (mAttrNullValue) { delete mAttrNullValue; mAttrNullValue=0; }
d366 31
a396 1
eBoolean Attribute::operator>>(FILE* fp)
d400 1
a400 1
  fprintf(fp, "%s,%s", mName, Enum2Str(ValueTypeNV, mValueType));
d405 1
a405 1
eBoolean Attribute::operator<<(FILE* fp)
d421 1
a421 4
  if (mName) { delete mName; mName=0; }

  mName = new char[strlen(namestr)+1];
  strcpy((char*)mName, namestr);
d428 10
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
// $RCSfile:$
// $Revision:$
d6 1
d8 2
d12 1
a12 1
#include "Attribute.h"
d15 4
a18 2
  name(0),
  type(eValueUnknown)
d23 4
a26 2
  name(0),
  type(eValueUnsigned)
d28 1
a28 1
  name = new char [strlen(nm) + 1];
d30 1
a30 1
  strcpy(name, nm);
d33 5
a37 3
Attribute::Attribute(const char* nm, eValueType typ) :
  name(0),
  type(typ)
d39 3
a41 1
  name = new char [strlen(nm) + 1];
d43 4
a46 1
  strcpy(name, nm);
d50 4
a53 2
  name(0),
  type(eValueUnsigned)
d55 2
a56 2
  name = new char[strlen(nm)+1];
  strcpy(name, nm);
d60 4
a63 2
  name(0),
  type(typ)
d65 2
a66 2
  name = new char[strlen(nm)+1];
  strcpy(name, nm);
d71 6
a76 3
  type = attr.type;
  name = new char[strlen(attr.name)+1];
  strcpy(name, attr.name);
d81 2
a82 1
  if (name) delete [] name;
d89 1
a89 1
  fprintf(fp, "%s,%s", name, Enum2Str(ValueTypeNV, type));
d110 1
a110 1
  if (name) delete name;
d112 2
a113 2
  name = new char[strlen(namestr)+1];
  strcpy((char*)name, namestr);
d115 1
a115 1
  type = (eValueType)Str2Enum(ValueTypeNV, typestr);
@
