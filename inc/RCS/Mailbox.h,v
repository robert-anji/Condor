head	1.4;
access;
symbols;
locks
	robert:1.4; strict;
comment	@ * @;


1.4
date	2011.12.20.17.25.20;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2011.12.07.07.01.57;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.14.21.52.01;	author ranji;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.19.01.36.27;	author ranji;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Removed (cleaned up) #include Simulator.h .
@
text
@// $RCSfile: Mailbox.h,v $
// $Revision: 1.3 $

#ifndef MailboxClass
#define MailboxClass

#define D_MailboxEntriesMax 10000

#include "MailboxBase.h"

class Process;

template <class T>
class Mailbox : public MailboxBase
{
  friend class Scheduler;

public:
  Mailbox();
 ~Mailbox();

  // Add/Remove entries with potential blocking of the calling 'process'.
  bool SchedulePut(T* t, Process* process);
  void ScheduleGet(Process* process);

private:
  unsigned mMailboxId;
  unsigned mEntriesMax;
};

#include "Mailbox.cc"

#endif

// End
@


1.3
log
@Replaced the Put() and Get() functions with SchedulePut() and ScheduleGet() as
Mailbox needs to defer which process can do Put or Get to the Scheduler so that
fairness (in future: priority based) can be correctly implemented and
accomplished. The Mailbox implementation became greatly simplified as it lets
the Scheduler do all the hard work.
@
text
@d2 1
a2 1
// $Revision: 1.2 $
a9 1
#include "Simulator.h"
@


1.2
log
@1. Made Scheduler a friend.
2. Made MailboxCommit() private.
3. Removed 'extern Scheduler' (put in Mailbox.cc instead).
@
text
@d2 1
a2 1
// $Revision: 1.1 $
d9 1
d15 1
a15 1
class Mailbox
d20 2
a21 6
  Mailbox(unsigned max_size);
  ~Mailbox();

  // Mailbox polling functions (they do not block).
  bool Put(T* elem); // return of false implies 'elem' was not put
  T*   Get();        // return of 0 implies there are no elements
d24 2
a25 7
  bool Put(T* elem, Process* process);
  T*   Get(Process* process);

  unsigned EntriesAvailableForPut() { return mEntriesMax -
                                     (mEntryPutUncommitted ? (mEntryPutUncommitted - mEntryGetCommitted)
                                                           : (mEntryPutCommitted  - mEntryGetCommitted)); }
  unsigned EntriesAvailableForGet() { return mEntryPutCommitted - mEntryGetCommitted; }
d28 1
d30 1
a30 10
  unsigned mEntryPutCommitted;
  unsigned mEntryGetCommitted;
  unsigned mEntryPutUncommitted;
  //
  Process* mpProcessesBlockedForGet;
  Process* mpProcessesBlockedForPut;
  //
  T*       mpEntries [];
  //
  SimulationTime mEntryPutUncommittedTime;
d32 1
a32 3
  // Commit operation (will be invoked from Scheduler).
  bool MailboxCommit();
};
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
// $RCSfile: template.txt,v $
d9 1
a9 3
class Scheduler;

extern Scheduler* gScheduler;
d16 2
a29 3
  // Commit operation (will be invoked from Scheduler).
  bool MailboxCommit();

d45 5
@
