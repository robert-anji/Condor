head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2011.12.20.17.25.34;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2011.12.03.18.02.00;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2011.04.22.21.00.42;	author ranji;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.16.01.39.36;	author ranji;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.19.01.36.33;	author ranji;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Added ability to allow the Module constructor to use a function pointer within
which all components can be built (processes, sub-modules, mailboxes etc.).
This avoids needing a derived Module class.
@
text
@// $RCSfile: Module.h,v $
// $Revision: 1.4 $

#ifndef ModuleClass
#define ModuleClass

#include "List.h"
#include "String.h"

static unsigned sModuleCount;

class Interface;
class Process;
class Clock;

enum eModuleRelation {
  eModule1IsChild,
  eModule2IsChild,
  eInterModule
};

class Module;

typedef void (*ModuleConstrFunctionPtr)(Module* m);
typedef        ModuleConstrFunctionPtr  ModuleConstrFnPtr;

class Module
{
  friend class Scheduler;
  friend class Simulator;
  friend class Vcd;

public:
  Module(const char* name, Module* parent_module);
  Module(const char* name, Module* parent_module, ModuleConstrFnPtr fn_ptr);
  virtual ~Module();

  virtual bool Build() {}
  //
  bool ProcessAdd(Process* process);

  // Tasks to connect interfaces.
  bool ConnectInterfaceGroup(Interface* intf1, Interface* intf2, const char* group_name);
  bool ConnectInterfaceGroup(Interface* intf1, const char* grp_name1, Interface* intf2, const char* grp_name2);
//TBD:
//bool ConnectSignal(Interface* intf1, Interface* intf2, const char* signal_name);
//bool ConnectSignal(Interface* intf1, const char* signal_name1, Interface* intf2, const char* signal_name2);

  // Query methods.
  bool        IsChildModuleOf(Module* mod);
  Module*     ParentModule() { return mpParentModule;     }
  const char* Name()         { return (const char*)mName; }
  //
  Process*    ProcessFind(const char* process_name, bool search_in_submodules);

private:
  String        mName;
  Module*       mpParentModule;
  ModuleConstrFnPtr mModuleConstrFnPtr;
  List<Module>  mSubModulesList;
  List<Process> mProcessesList;
  unsigned      mModuleId;
  unsigned      mModuleDepth;
};

#endif

// End
@


1.4
log
@Removed #include "Mailbox.h", was not required.
@
text
@d2 1
a2 1
// $Revision: 1.3 $
d22 5
d34 2
a35 1
  Module(const char* name, Module* parent_module=0);
d59 1
@


1.3
log
@1. Added mModuleId and mModuleDepth.
2. Added utility: IsChildModuleOf(Module*).
3. Added enum: eModuleRelation.
@
text
@d2 1
a2 1
// $Revision: 1.2 $
a7 1
#include "Mailbox.h"
@


1.2
log
@1. Made Scheduler a friend class.
2. Added functions to connect interfaces by group.
3. Added function: ProcessFind().
4. Renamed mListSubModules, mListProcesses to mSubModulesList, mProcessesList.
@
text
@d2 1
a2 1
// $Revision: 1.1 $
d11 2
d17 6
d39 1
a39 1
  bool ConnectInterfaceGroup(Interface* intf1, const char* intf1_name, Interface* intf2, const char* intf2_name);
d45 2
a47 1
  Module*     ParentModule() { return mpParentModule;     }
d56 2
@


1.1
log
@Initial revision
@
text
@d8 2
a9 1
#include "MyString.h"
d11 1
d13 1
d17 1
a17 1
public:
d21 3
a23 2
  Module(const char* name, Module* parent_module);
  ~Module();
d27 8
a34 1
  bool ProcessAdd(Process* process) { return mListProcesses.Add(process); }
d39 2
d45 2
a46 5
  List<Module>  mListSubModules;
  List<Process> mListProcesses;

  // Simulator class should create one toplevel Module called "Root".
  Module() : mName("top"), mpParentModule(0) {};
@
