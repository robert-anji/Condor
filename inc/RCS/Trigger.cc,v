head	1.6;
access;
symbols
	C1_80:1.1;
locks
	robert:1.6; strict;
comment	@// @;


1.6
date	2011.08.16.03.03.52;	author robert;	state Exp;
branches;
next	1.5;

1.5
date	2011.06.26.16.00.09;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.25.13.30.25;	author ranji;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.30.08.35.28;	author ranji;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.15.01.04.55;	author ranji;	state Exp;
branches;
next	1.1;

1.1
date	2007.07.14.14.56.57;	author ranji;	state Exp;
branches;
next	;


desc
@@


1.6
log
@1. Switched from rec->Match(query) to query->Match(rec).
@
text
@// $RCSfile: Trigger.cc,v $
// $Revision: 1.5 $

#include <assert.h>

#include "Trigger.h"
//
#include "Condition.h"
#include "Global.h"
#include "Query.h"
#include "Record.h"

M_ExternConstructDestructCountInt;
// TriggerMatchAggregate;

Trigger::Trigger(const char* trg_name, eTriggerType type, void *trg_owner_obj, TriggerActionFunctionPtr fn_ptr, View *v, Query *q, Record *rec) :
  mName                (trg_name),
  mTriggerType         (type),
  mpTriggerOwnerObj    (trg_owner_obj),
  mTriggerActionFnPtr  (fn_ptr),
  mpView               (v),
  mpQuery              (0),
  mpRecord             (rec),
  mTriggerState        (eTriggerState_Active),
  mMatchedCount        (0)
{
  if (q) { mpQuery = new Query(*q); assert(mpQuery); }

  M_UpdConstructCount(eType_Trigger);
}

Trigger::~Trigger()
{
  if (mpQuery) { delete mpQuery; mpQuery=0; }

  M_UpdDestructCount(eType_Trigger);
}

void Trigger::TriggerActionExecute()
{
  if (mTriggerActionFnPtr) (*mTriggerActionFnPtr)(this);
  else                     mMatchedCount++;
}

bool Trigger::TriggerMatch(Record *rec)
{
  if (rec) {
    if (mpRecord) { if (mpRecord != rec) return FALSE;
                    else                 return mpQuery->Match(rec); }
    if (mpQuery)  { return mpQuery->Match(rec); }

    assert(0); // must have either mpRecord or a mpQuery
  }

  // The remaining logic is for rec==0

  // rec is null but Trigger needs to match mpRecord, then return FALSE.
  if (mpRecord) return FALSE;
  
  assert(mpQuery); // cannot have rec==0, mpRecord==0 and mpQuery==0

  return mpQuery->Match();
}

bool Trigger::TriggerStateSet(eTriggerState trg_state)
{
  mTriggerState = trg_state;

  return TRUE;
}

eTriggerType Trigger::TriggerType() const
{
  return mTriggerType;
}

eTriggerState Trigger::TriggerStateGet() const
{
  return mTriggerState;
}

void Trigger::Clear()
{
  mMatchedCount = 0;
}

// End
@


1.5
log
@1. Removed logic required to handle Aggregates, this is now within
   Query and Condition.
2. Fixed RecordMatch().
@
text
@d2 1
a2 1
// $Revision: 1.4 $
d49 2
a50 2
                    else                 return rec->Match(mpQuery); }
    if (mpQuery)  { return rec->Match(mpQuery); }
d56 2
d62 1
a62 2
//return mpQuery->Match(); // CONT: need to add this function,
//                         //       also add: mpQuery->Match(const Value&)
@


1.4
log
@1. Removed mpBlockedProcess as we want Trigger to be independent of Simulation classes.
2. Added trigger name to TriggerNew(...).
 [2010Sep28: Implement Event's based on Trigger's in a new class: EventFromTrigger.]
@
text
@d2 1
a2 4
// $Revision: 1.3 $
// 1. Changed return type of TriggerMatchRecord(), TriggerMatchAggregate() to
//    bool from eBoolean.
// 2. Now using Query copy constructor in Trigger constructor.
a7 1
#include "Aggregate.h"
d14 1
a23 18
  mpAggregate          (0),
  mTriggerState        (eTriggerState_Active),
  mMatchedCount        (0)
{
  if (q) { mpQuery = new Query(*q); assert(mpQuery); }

  M_UpdConstructCount(eType_Trigger);
}

Trigger::Trigger(const char* trg_name, eTriggerType type, void* trg_owner_obj, TriggerActionFunctionPtr fn_ptr, View* v, Query* q, Aggregate* aggr) :
  mName                (trg_name),
  mTriggerType         (type),
  mpTriggerOwnerObj    (trg_owner_obj),
  mTriggerActionFnPtr  (fn_ptr),
  mpView               (v),
  mpQuery              (0),
  mpRecord             (0),
  mpAggregate          (aggr),
d45 1
a45 1
bool Trigger::TriggerMatchRecord(Record *rec)
d47 12
a58 5
  if      (mpRecord == rec)     return mpRecord->Match(mpQuery);
  else if (! mpQuery)           return TRUE;
  else if (rec->Match(mpQuery)) return TRUE;
  else                          return FALSE;
}
d60 2
a61 3
bool Trigger::TriggerMatchAggregate()
{
  return (*mpAggregate->ValueGet()).Match(mpQuery);
@


1.3
log
@1. Renamed TriggerRecordMatch() with TriggerMatchRecord().
2. Added arg TriggerActionFnPtr to constructor.
3. Removed constructor for aggregate, aggregate can later be put in Query.
@
text
@d2 1
a2 1
// $Revision: 1.2 $
d19 2
a20 1
Trigger::Trigger(eTriggerType type, void *trg_owner_obj, TriggerActionFunctionPtr fn_ptr, View *v, Query *q, Record *rec) :
d29 1
a29 2
  mMatchedCount        (0),
  mpBlockedProcess     (0)
d36 2
a37 1
Trigger::Trigger(eTriggerType type, void* trg_owner_obj, TriggerActionFunctionPtr fn_ptr, View* v, Query* q, Aggregate* aggr) :
d46 1
a46 2
  mMatchedCount        (0),
  mpBlockedProcess     (0)
@


1.2
log
@1. Added macros to track constructor & destructor calls (catch memory leaks).
2. Create copy of Query passed in from constructors.
3. Renamed TriggerMatchRecord() to TriggerRecordMatch().
4. Fixed prefix mp (was just m) for mQuery, mRecord and mAttribute.
5. Added TriggerStateGet() and TriggerType().
6. Removed TriggerActivate() and TriggerSuspend().
@
text
@d2 1
a2 1
// $Revision: 1.1 $
d19 1
a19 1
Trigger::Trigger(eTriggerType type, void *trg_owner_obj, View *v, Query *q, Record *rec) :
d22 1
d36 1
a36 1
Trigger::Trigger(eTriggerType type, void* trg_owner_obj, View* v, Aggregate* aggr, Query* q) :
d39 1
d66 1
a66 1
bool Trigger::TriggerRecordMatch(Record *rec)
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
// $RCSfile$
// $Revision$
d13 2
d17 3
a19 1
Trigger::Trigger(eTriggerType type, TriggerActionFnPtr fn, void *trg_owner_obj, View *v, Query *q, Record *rec) :
d21 8
a28 7
  mTriggerActionFnPtr  (fn),
  mTriggerOwnerObj     (trg_owner_obj),
  mView                (v),
  mQuery               (q),
  mRecord              (rec),
  mAggregate           (0),
  mTriggerState        (eTriggerState_Active)
d30 3
a32 1
  // mQuery = new Query(q); // no query copy constructor yet
d35 1
a35 1
Trigger::Trigger(eTriggerType type, TriggerActionFnPtr fn, void *trg_owner_obj, View *v, Aggregate *aggr, Query *q) :
d37 8
a44 7
  mTriggerActionFnPtr  (fn),
  mTriggerOwnerObj     (trg_owner_obj),
  mView                (v),
  mQuery               (q),
  mRecord              (0),
  mAggregate           (aggr),
  mTriggerState        (eTriggerState_Active)
d46 3
a48 1
  // mQuery = new Query(q); // no query copy constructor yet
d53 3
d60 2
a61 1
  (*mTriggerActionFnPtr)(this, mView, mTriggerOwnerObj);
d64 1
a64 1
eBoolean Trigger::TriggerMatchRecord(Record *rec)
d66 4
a69 4
  if      (mRecord == rec)     return mRecord->Match(mQuery);
  else if (! mQuery)           return TRUE;
  else if (rec->Match(mQuery)) return TRUE;
  else                         return FALSE;
d72 1
a72 1
eBoolean Trigger::TriggerMatchAggregate()
d74 1
a74 1
  return (*mAggregate->ValueGet()).Match(mQuery);
d77 1
a77 1
eBoolean Trigger::TriggerSuspend()
d79 1
a79 1
  mTriggerState = eTriggerState_Suspended;
d84 1
a84 1
eBoolean Trigger::TriggerActivate()
d86 1
a86 3
  mTriggerState = eTriggerState_Active;

  return TRUE;
d89 1
a89 1
eTriggerState Trigger::TriggerState()
d94 1
a94 1
eTriggerType Trigger::TriggerType()
d96 1
a96 1
  return mTriggerType;
@
